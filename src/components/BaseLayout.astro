---
import { ViewTransitions } from 'astro:transitions';
import { siteConfig } from '@/config';
import type { SEOData } from '@/types';
import Header from '@/components/Header.astro';
import Footer from '@/components/Footer.astro';
import CommandPalette from '@/components/CommandPalette.astro';
import ScrollToTop from '@/components/ScrollToTop.astro';
import '@/styles/global.css';

export interface Props {
  seoData: SEOData;
  bodyClass?: string;
}

const { seoData, bodyClass = '' } = Astro.props;
---

<!DOCTYPE html>
<html lang={siteConfig.language} class="scrollbar-hide">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <!-- SEO Meta Tags -->
  <title>{seoData.title}</title>
  <meta name="description" content={seoData.description}>
  <link rel="canonical" href={seoData.canonical}>

  <!-- Open Graph -->
  <meta property="og:title" content={seoData.title}>
  <meta property="og:description" content={seoData.description}>
  <meta property="og:url" content={seoData.canonical}>
  <meta property="og:type" content={seoData.ogType}>
  <meta property="og:site_name" content={siteConfig.title}>

  {seoData.ogImage && (
    <>
      <meta property="og:image" content={seoData.ogImage.url}>
      <meta property="og:image:alt" content={seoData.ogImage.alt}>
      <meta property="og:image:width" content={seoData.ogImage.width.toString()}>
      <meta property="og:image:height" content={seoData.ogImage.height.toString()}>
    </>
  )}

  <!-- Twitter Card -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content={seoData.title}>
  <meta name="twitter:description" content={seoData.description}>
  {seoData.ogImage && (
    <>
      <meta name="twitter:image" content={seoData.ogImage.url}>
      <meta name="twitter:image:alt" content={seoData.ogImage.alt}>
    </>
  )}

  <!-- Article specific meta tags -->
  {seoData.ogType === 'article' && (
    <>
      {seoData.publishedTime && <meta property="article:published_time" content={seoData.publishedTime}>}
      {seoData.modifiedTime && <meta property="article:modified_time" content={seoData.modifiedTime}>}
      {seoData.tags && seoData.tags.map(tag => (
        <meta property="article:tag" content={tag}>
      ))}
    </>
  )}

  <!-- Favicon -->
  <link rel="icon" type="image/x-icon" href="/favicon-light.ico" id="favicon">
  
  <!-- Command Palette Config for Client Script -->
  <meta name="command-palette-shortcut" content={siteConfig.commandPalette.shortcut || ''}>

  <!-- Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">

  <!-- Font Awesome Icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/7.0.0/css/all.min.css">

  <!-- Theme initialization script -->
  <script is:inline>
    // Initialize theme before page renders to prevent flash
    function initTheme() {
      const stored = localStorage.getItem('theme');
      const system = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      const theme = stored || system;

      document.documentElement.classList.remove('light', 'dark');
      document.documentElement.classList.add(theme);

      // Update favicon
      const favicon = document.getElementById('favicon');
      if (favicon) {
        favicon.href = theme === 'dark' ? '/favicon-dark.ico' : '/favicon-light.ico';
      }
    }

    // Initialize immediately
    initTheme();

    // View Transitions disabled - no need for astro:page-load

    // Listen for system theme changes
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
      if (!localStorage.getItem('theme')) {
        const newTheme = e.matches ? 'dark' : 'light';
        localStorage.setItem('theme', newTheme);
        initTheme();
      }
    });

    // Global theme toggle function - always available regardless of button visibility
    function toggleTheme() {
      const html = document.documentElement;
      const isDark = html.classList.contains('dark');
      const newTheme = isDark ? 'light' : 'dark';

      // Update theme
      localStorage.setItem('theme', newTheme);
      html.classList.remove('light', 'dark');
      html.classList.add(newTheme);

      // Update favicon
      const favicon = document.getElementById('favicon');
      if (favicon) {
        favicon.href = newTheme === 'dark' ? '/favicon-dark.ico' : '/favicon-light.ico';
      }

      // Icons are now static SVG - no re-initialization needed

      // Dispatch theme change event
      window.dispatchEvent(new CustomEvent('themechange', {
        detail: { theme: newTheme }
      }));
    }

    // Make toggle function globally accessible
    window.toggleTheme = toggleTheme;
  </script>

  <!-- View Transitions - temporarily disabled to fix compiler issues -->
  <!-- <ViewTransitions /> -->

  <!-- Additional head content -->
  <slot name="head" />
</head>

<body class={`min-h-screen bg-white dark:bg-primary-950 text-primary-900 dark:text-primary-50 text-selection-highlight transition-colors duration-200 flex flex-col ${bodyClass}`}>
  <!-- Skip to main content -->
  <a href="#main-content" class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-primary-900 text-white px-4 py-2 rounded-md z-50">
    Skip to main content
  </a>

  <!-- Header -->
  <Header />

  <!-- Main content -->
  <main id="main-content" class="container mx-auto px-4 py-8 max-w-4xl relative flex-grow">
    <slot />
  </main>

  <!-- Footer -->
  <Footer />

  <!-- Command Palette -->
  {siteConfig.features.commandPalette && <CommandPalette />}

  <!-- Scroll to Top -->
  {siteConfig.features.scrollToTop && <ScrollToTop />}

  <!-- Global scripts -->
  <script>
    // Smooth scrolling for anchor links
    document.addEventListener('DOMContentLoaded', () => {
      // Enable smooth scrolling
      document.documentElement.style.scrollBehavior = 'smooth';

      // Handle anchor links
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
          e.preventDefault();
          const target = document.querySelector(this.getAttribute('href'));
          if (target) {
            target.scrollIntoView({
              behavior: 'smooth',
              block: 'start'
            });
          }
        });
      });

      // Icons are now static SVG - no initialization needed

      // Handle external links
      document.querySelectorAll('a[href^="http"]').forEach(link => {
        if (link.hostname !== window.location.hostname) {
          link.target = '_blank';
          link.rel = 'noopener noreferrer';
        }
      });

      // Global keyboard shortcuts
      document.addEventListener('keydown', (e) => {
        // Command palette shortcut - dynamically read from config
        const shortcut = document.querySelector('meta[name="command-palette-shortcut"]')?.getAttribute('content');
        if (shortcut && shortcut.trim()) {
          const parts = shortcut.toLowerCase().split('+');
          const key = parts[parts.length - 1];
          const needsCtrl = parts.includes('ctrl');
          const needsMeta = parts.includes('cmd') || parts.includes('meta');
          
          if (((needsCtrl && e.ctrlKey) || (needsMeta && e.metaKey)) && e.key.toLowerCase() === key) {
            e.preventDefault();
            const event = new CustomEvent('openCommandPalette');
            window.dispatchEvent(event);
          }
        }
      });
    });
  </script>

  <!-- Additional body scripts -->
  <slot name="scripts" />

  <!-- Static SVG icons - no dynamic loading needed -->
</body>
</html>

<style is:global>
  /* Global styles */
  html {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
    scroll-padding-top: 2rem;
  }

  /* Hide scrollbars */
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }

  /* Text selection */
  ::selection {
    background-color: rgb(14 165 233 / 0.2);
    color: inherit;
  }

  ::-moz-selection {
    background-color: rgb(14 165 233 / 0.2);
    color: inherit;
  }

  /* Focus styles */
  :focus-visible {
    outline: 2px solid rgb(14 165 233);
    outline-offset: 2px;
  }

  /* Wikilink styles */
  .wikilink {
    @apply text-highlight-500 dark:text-highlight-400 font-medium hover:text-highlight-600 dark:hover:text-highlight-300 transition-colors;
  }

  .wikilink-broken {
    @apply text-red-500 dark:text-red-400 cursor-not-allowed;
  }

  /* Button styles */
  .btn-primary {
    @apply inline-flex items-center px-4 py-2 bg-primary-900 dark:bg-primary-100 text-white dark:text-primary-900 font-medium rounded-lg hover:bg-primary-800 dark:hover:bg-primary-200 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2;
  }

  .btn-secondary {
    @apply inline-flex items-center px-4 py-2 bg-primary-100 dark:bg-primary-800 text-primary-900 dark:text-primary-100 font-medium rounded-lg hover:bg-primary-200 dark:hover:bg-primary-700 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2;
  }

  .btn-outline {
    @apply inline-flex items-center px-4 py-2 border border-primary-300 dark:border-primary-600 text-primary-900 dark:text-primary-100 font-medium rounded-lg hover:bg-primary-50 dark:hover:bg-primary-800 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2;
  }

  /* Callout styles */
  .callout {
    @apply my-6 p-4 rounded-lg border-l-4;
  }

  .callout-note {
    @apply bg-blue-50 dark:bg-blue-950 border-blue-400 dark:border-blue-600;
  }

  .callout-warning {
    @apply bg-yellow-50 dark:bg-yellow-950 border-yellow-400 dark:border-yellow-600;
  }

  .callout-tip {
    @apply bg-green-50 dark:bg-green-950 border-green-400 dark:border-green-600;
  }

  .callout-important {
    @apply bg-purple-50 dark:bg-purple-950 border-purple-400 dark:border-purple-600;
  }

  .callout-caution {
    @apply bg-red-50 dark:bg-red-950 border-red-400 dark:border-red-600;
  }
</style>