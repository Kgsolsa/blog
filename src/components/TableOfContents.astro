---
import type { Heading } from '@/types';
import Icon from './Icon.astro';

export interface Props {
  headings: Heading[];
}

const { headings } = Astro.props;

// Filter and structure headings
const filteredHeadings = headings.filter(h => h.depth >= 2 && h.depth <= 4);
---

{filteredHeadings.length > 0 && (
  <nav class="toc-nav toc-container p-4 bg-white dark:bg-primary-900 rounded-xl border border-primary-200 dark:border-primary-700 shadow-lg backdrop-blur-sm bg-opacity-95 dark:bg-opacity-95">
    <div class="toc-content pr-2">
      <button 
        class="toc-toggle w-full font-semibold text-primary-900 dark:text-primary-50 mb-3 flex items-center justify-between text-sm hover:text-highlight-600 dark:hover:text-highlight-400 transition-colors"
        aria-expanded="true"
        aria-controls="toc-list"
      >
        <div class="flex items-center">
          <Icon name="list" class="w-4 h-4 mr-2" />
          Contents
        </div>
        <Icon name="chevron-down" class="w-4 h-4 toc-chevron transition-transform duration-200" />
      </button>
      
      <ul class="space-y-2 toc-list" id="toc-list">
        {filteredHeadings.map(heading => (
          <li class={`toc-item toc-level-${heading.depth}`}>
            <a 
              href={`#${heading.slug}`}
              class="toc-link block text-sm text-primary-600 dark:text-primary-300 hover:text-highlight-600 dark:hover:text-highlight-400 transition-colors py-1"
              data-heading={heading.slug}
            >
              {heading.text}
            </a>
          </li>
        ))}
      </ul>
    </div>
  </nav>
)}

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const tocLinks = document.querySelectorAll('.toc-link');
    const headings = document.querySelectorAll('h2, h3, h4, h5, h6');
    const tocToggle = document.querySelector('.toc-toggle') as HTMLButtonElement;
    const tocList = document.querySelector('.toc-list') as HTMLElement;
    const tocChevron = document.querySelector('.toc-chevron') as HTMLElement;
    
    if (!tocLinks.length || !headings.length) return;
    
    // TOC Toggle functionality
    if (tocToggle && tocList && tocChevron) {
      tocToggle.addEventListener('click', () => {
        const isExpanded = tocToggle.getAttribute('aria-expanded') === 'true';
        
        if (isExpanded) {
          // Collapse
          tocList.style.display = 'none';
          tocToggle.setAttribute('aria-expanded', 'false');
          tocChevron.style.transform = 'rotate(-90deg)';
        } else {
          // Expand
          tocList.style.display = 'block';
          tocToggle.setAttribute('aria-expanded', 'true');
          tocChevron.style.transform = 'rotate(0deg)';
        }
      });
    }
    
    // Highlight active section in TOC
    function highlightTOC() {
      let current = '';
      
      headings.forEach(heading => {
        const rect = heading.getBoundingClientRect();
        if (rect.top <= 100) {
          current = heading.id;
        }
      });
      
      tocLinks.forEach(link => {
        const href = link.getAttribute('href')?.slice(1);
        if (href === current) {
          link.classList.add('active');
        } else {
          link.classList.remove('active');
        }
      });
    }
    
    
    // Update active link on scroll
    let ticking = false;
    window.addEventListener('scroll', () => {
      if (!ticking) {
        requestAnimationFrame(() => {
          highlightTOC();
          ticking = false;
        });
        ticking = true;
      }
    });
    
    // Initial highlight
    highlightTOC();
    
    // Force scrollbar style refresh
    const tocNav = document.querySelector('.toc-container') as HTMLElement;
    if (tocNav) {
      // Trigger a reflow to force style recalculation
      tocNav.style.display = 'none';
      tocNav.offsetHeight; // Trigger reflow
      tocNav.style.display = '';
    }
  });
</script>

<style>
  .toc-level-2 {
    @apply ml-0;
  }
  
  .toc-level-3 {
    @apply ml-4;
  }
  
  .toc-level-4 {
    @apply ml-8;
  }
  
  .toc-link.active {
    @apply text-highlight-600 dark:text-highlight-400 font-medium;
  }
  
  .toc-link.active::before {
    content: '';
    @apply absolute left-0 top-1/2 transform -translate-y-1/2 w-0.5 h-4 bg-highlight-600 dark:bg-highlight-400 rounded-full;
  }
  
  .toc-item {
    @apply relative;
  }
  
  .toc-nav {
    /* No height restrictions - let it flow naturally */
  }
  
  .toc-content {
    /* No scrolling needed - content flows naturally */
  }
  
  /* Desktop floating TOC */
  @media (min-width: 1280px) {
    .toc-nav {
      width: 280px;
      max-width: 280px;
    }
  }
  
  /* Mobile/Tablet TOC */
  @media (max-width: 1279px) {
    .toc-nav {
      width: 100%;
      max-width: 100%;
    }
  }
  
  /* No scrollbar needed - content flows naturally */
  
  .toc-chevron {
    @apply transition-transform duration-200;
  }
</style>
