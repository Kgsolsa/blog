---
import type { CollectionEntry } from 'astro:content';
import { formatDate, processMarkdown, isValidDate } from '../utils/markdown';
import { siteConfig, getPostCardAspectRatio } from '../config';
import { normalizeStatus, getStatusDisplayText, hasStatusStyling, getStatusClasses } from '../utils/status';
import { optimizeContentImagePath } from '../utils/images';
import ImageWrapper from './ImageWrapper.astro';
import Icon from './Icon.astro';

interface Props {
  project: CollectionEntry<'projects'>;
  featured?: boolean;
  eager?: boolean;
  context?: 'featured' | 'recent' | 'projects' | 'tags' | 'home';
  showCategories?: boolean;
}

const { project, featured = false, eager = false, context = 'projects', showCategories = true } = Astro.props;

// Get excerpt from markdown processing
const { excerpt } = processMarkdown(project.body);

const { title, description: rawDescription, date, image: rawImage, imageAlt } = project.data;

// Process Obsidian bracket syntax in image field (copy from PostCard)
const image = (() => {
  if (!rawImage) return rawImage;

  // Handle case where rawImage is an array (unquoted YAML syntax)
  let imageValue = rawImage;
  if (Array.isArray(rawImage)) {
    // If it's an array, take the first element
    imageValue = rawImage[0];
  }

  // Ensure imageValue is a string before calling string methods
  if (typeof imageValue !== 'string') {
    console.warn('ProjectCard: imageValue is not a string:', imageValue);
    return imageValue;
  }

  // Check if it's Obsidian double bracket syntax
  if (imageValue.startsWith('[[') && imageValue.endsWith(']]')) {
    // Extract the content inside the double brackets
    return imageValue.slice(2, -2);
  }

  return imageValue;
})();

const description = rawDescription || excerpt;
const categories = project.data.categories || [];
const status = normalizeStatus(project.data.status);
const repositoryUrl = project.data.repositoryUrl;
const projectUrl = project.data.projectUrl;

// Determine if we should show the cover image
// Projects should always show images when available (not controlled by postOptions)
const shouldShowCoverImage = true;
---

<div class="group relative bg-white dark:bg-primary-800 rounded-xl border border-primary-200 dark:border-primary-700 overflow-hidden hover:shadow-xl transition-all duration-300 hover:-translate-y-1 aspect-[4/3]" data-project-categories={categories.join(',')}>
  <a href={`/projects/${project.id}`} class="block h-full" aria-label={`View project: ${title}`}>
    <!-- Background Image or Fallback -->
    {image && shouldShowCoverImage && (
      <div class="absolute inset-0">
        <ImageWrapper
          src={(() => {
            // Clean the image path by removing Obsidian brackets
            let cleanImagePath = image;
            if (!cleanImagePath || typeof cleanImagePath !== 'string') return '';
            if (cleanImagePath.startsWith('[[') && cleanImagePath.endsWith(']]')) {
              cleanImagePath = cleanImagePath.slice(2, -2);
            }

            // Remove Obsidian subfolder prefixes (images/, attachments/)
            if (typeof cleanImagePath === 'string') {
              // Remove images/ prefix if present (Obsidian subfolder setting)
              if (cleanImagePath.startsWith('images/')) {
                return cleanImagePath.replace('images/', '');
              }
              // Remove attachments/ prefix - basePath will add it back
              if (cleanImagePath.startsWith('attachments/')) {
                return cleanImagePath.replace('attachments/', '');
              }
            }

            return cleanImagePath || '';
          })()}
          basePath={(() => {
            // 1. External URLs - no basePath needed
            if (typeof image === 'string' && image.startsWith('http')) {
              return '';
            }

            // 2. Clean the image path to check for attachments/ prefix
            let cleanImagePath = image;
            if (typeof cleanImagePath === 'string' && cleanImagePath.startsWith('[[') && cleanImagePath.endsWith(']]')) {
              cleanImagePath = cleanImagePath.slice(2, -2);
            }

            // 3. Check if image is in attachments/ subfolder
            if (typeof cleanImagePath === 'string' && cleanImagePath.startsWith('attachments/')) {
              // Single-file project with image in attachments folder
              // The sync script copies these to /projects/attachments/
              return "/projects/attachments/";
            }

            // 4. Otherwise assume folder-based project with co-located image
            // The sync script copies these to /projects/project-id/
            return `/projects/${project.id}/`;
          })()}
          alt={imageAlt || `Cover image for project: ${title}`}
          width={800}
          height={600}
          loading={eager ? 'eager' : 'lazy'}
          fetchpriority={eager ? 'high' : 'auto'}
          class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
        />
        <!-- Dark overlay for better text readability -->
        <div class="absolute inset-0 bg-black/70 group-hover:bg-black/80 transition-colors duration-300"></div>
      </div>
    )}

    {!image && (
      <!-- Fallback background when no image -->
      <div class="absolute inset-0 bg-gradient-to-br from-primary-200 to-primary-300 dark:from-primary-700 dark:to-primary-800"></div>
    )}

    <!-- Status badge -->
    {status && (
      <div class="absolute top-3 right-3 z-10">
        <span class={`px-2 py-1 rounded-full text-xs font-medium shadow-sm ${getStatusClasses(status)}`}>
          {getStatusDisplayText(status)}
        </span>
      </div>
    )}

    <!-- Date -->
    {isValidDate(date) && (
      <div class="absolute top-3 left-3 z-10">
        <time datetime={date.toISOString()} class={`text-xs font-mono px-2 py-1 rounded backdrop-blur-sm ${
          image && shouldShowCoverImage
            ? 'text-white/90 bg-black/20'
            : 'text-primary-700 dark:text-primary-200 bg-white/80 dark:bg-black/20'
        }`}>
          {formatDate(date)}
        </time>
      </div>
    )}

    <!-- Content Overlay -->
    <div class="absolute inset-0 flex flex-col p-6 z-10" style="padding-top: 4rem;">
      <!-- Spacer to push content down from top elements -->
      <div class="flex-1"></div>

      <!-- Title -->
      <h3 class={`text-xl font-bold mb-2 transition-colors line-clamp-2 text-center ${
        image && shouldShowCoverImage
          ? 'text-white group-hover:text-highlight-300 drop-shadow-lg'
          : 'text-primary-900 dark:text-primary-50 group-hover:text-highlight-600 dark:group-hover:text-highlight-400'
      }`}>
        {title}
      </h3>

      <!-- Hover content -->
      <div class="opacity-0 group-hover:opacity-100 transition-opacity duration-300">
        <!-- Description -->
        {description && (
          <p class={`text-sm mb-3 line-clamp-2 text-left ${
            image && shouldShowCoverImage
              ? 'text-white/90 drop-shadow-lg'
              : 'text-primary-700 dark:text-primary-300'
          }`}>
            {description}
          </p>
        )}

        <!-- Categories -->
        {showCategories && categories.length > 0 && (
          <div class="flex flex-wrap gap-1 mb-3 justify-center">
            {categories.slice(0, 3).map(category => (
              <span class={`inline-flex items-center px-2 py-1 text-xs font-medium rounded backdrop-blur-sm ${
                image && shouldShowCoverImage
                  ? 'bg-white/20 text-white/90'
                  : 'bg-primary-100 dark:bg-primary-700 text-primary-700 dark:text-primary-200'
              }`}>
                {category}
              </span>
            ))}
            {categories.length > 3 && (
              <span class={`inline-flex items-center px-2 py-1 text-xs font-medium rounded backdrop-blur-sm ${
                image && shouldShowCoverImage
                  ? 'bg-white/20 text-white/90'
                  : 'bg-primary-100 dark:bg-primary-700 text-primary-700 dark:text-primary-200'
              }`}>
                +{categories.length - 3} more
              </span>
            )}
          </div>
        )}

      </div>
    </div>
  </a>
</div>
