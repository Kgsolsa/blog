---
import { siteConfig } from '../config.ts';
---

<!-- Command Palette Overlay -->
<div 
  id="command-palette-overlay" 
  class="fixed inset-0 z-50 hidden bg-black/50 backdrop-blur-sm animate-fade-in"
  role="dialog"
  aria-modal="true"
  aria-labelledby="command-palette-title"
>
  <div class="flex min-h-full items-start justify-center p-4 sm:p-8">
    <div class="w-full max-w-2xl bg-white dark:bg-primary-900 rounded-xl shadow-2xl border border-primary-200 dark:border-primary-700 animate-scale-in">
      <!-- Header -->
      <div class="flex items-center justify-between p-4 border-b border-primary-200 dark:border-primary-700">
        <h2 id="command-palette-title" class="text-lg font-semibold text-primary-900 dark:text-primary-50">
          Command Palette
        </h2>
        <button 
          id="command-palette-close"
          class="p-1 text-primary-500 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-200 transition-colors"
          aria-label="Close command palette"
        >
          <i data-lucide="x" class="w-5 h-5"></i>
        </button>
      </div>

      <!-- Search Input -->
      <div class="p-4">
        <div class="relative">
          <i data-lucide="search" class="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-primary-400 dark:text-primary-500"></i>
          <input
            id="command-palette-input"
            type="text"
            placeholder={siteConfig.commandPalette.placeholder}
            class="w-full pl-10 pr-4 py-3 bg-primary-50 dark:bg-primary-800 border border-primary-200 dark:border-primary-600 rounded-lg text-primary-900 dark:text-primary-50 placeholder-primary-500 dark:placeholder-primary-400 focus:outline-none focus:ring-2 focus:ring-highlight-500 focus:border-transparent"
            autocomplete="off"
            spellcheck="false"
          >
        </div>
      </div>

      <!-- Results -->
      <div id="command-palette-results" class="max-h-96 overflow-y-auto scrollbar-hide">
        <!-- Loading state -->
        <div id="command-palette-loading" class="hidden p-4 text-center">
          <div class="inline-flex items-center space-x-2 text-primary-500 dark:text-primary-400">
            <div class="animate-spin rounded-full h-4 w-4 border-2 border-primary-300 dark:border-primary-600 border-t-highlight-500"></div>
            <span>Searching...</span>
          </div>
        </div>

        <!-- No results -->
        <div id="command-palette-no-results" class="hidden p-8 text-center">
          <i data-lucide="search-x" class="w-8 h-8 text-primary-400 dark:text-primary-500 mx-auto mb-2"></i>
          <p class="text-primary-600 dark:text-primary-300">No results found</p>
          <p class="text-sm text-primary-500 dark:text-primary-400 mt-1">Try a different search term</p>
        </div>

        <!-- Default items (shown when no search) -->
        <div id="command-palette-default" class="divide-y divide-primary-200 dark:divide-primary-700">
          <!-- Quick Actions -->
          <div class="p-2">
            <div class="px-3 py-2 text-xs font-medium text-primary-500 dark:text-primary-400 uppercase tracking-wide">
              Quick Actions
            </div>
            <button 
              data-action="toggle-theme"
              class="w-full flex items-center space-x-3 px-3 py-2 text-left hover:bg-primary-50 dark:hover:bg-primary-800 rounded-lg transition-colors group"
            >
              <i data-lucide="palette" class="w-4 h-4 text-primary-500 dark:text-primary-400 group-hover:text-highlight-500"></i>
              <span class="text-primary-900 dark:text-primary-50">Toggle Theme</span>
              <span class="ml-auto text-xs text-primary-500 dark:text-primary-400">⌘ K</span>
            </button>
          </div>

          <!-- Pages -->
          {siteConfig.navigation.pages.length > 0 && (
            <div class="p-2">
              <div class="px-3 py-2 text-xs font-medium text-primary-500 dark:text-primary-400 uppercase tracking-wide">
                Pages
              </div>
              {siteConfig.navigation.pages.map(page => (
                <a 
                  href={page.url}
                  class="w-full flex items-center space-x-3 px-3 py-2 hover:bg-primary-50 dark:hover:bg-primary-800 rounded-lg transition-colors group"
                >
                  <i data-lucide="file-text" class="w-4 h-4 text-primary-500 dark:text-primary-400 group-hover:text-highlight-500"></i>
                  <span class="text-primary-900 dark:text-primary-50">{page.title}</span>
                </a>
              ))}
            </div>
          )}

          <!-- Social Links -->
          {siteConfig.navigation.social.length > 0 && (
            <div class="p-2">
              <div class="px-3 py-2 text-xs font-medium text-primary-500 dark:text-primary-400 uppercase tracking-wide">
                Social
              </div>
              {siteConfig.navigation.social.map(social => (
                <a 
                  href={social.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="w-full flex items-center space-x-3 px-3 py-2 hover:bg-primary-50 dark:hover:bg-primary-800 rounded-lg transition-colors group"
                >
                  <i class={`fab fa-${social.icon} w-4 h-4 text-primary-500 dark:text-primary-400 group-hover:text-highlight-500`}></i>
                  <span class="text-primary-900 dark:text-primary-50">{social.title}</span>
                  <i data-lucide="external-link" class="w-3 h-3 text-primary-400 dark:text-primary-500 ml-auto"></i>
                </a>
              ))}
            </div>
          )}
        </div>

        <!-- Search results will be populated here -->
        <div id="command-palette-search-results" class="hidden divide-y divide-primary-200 dark:divide-primary-700">
        </div>
      </div>

      <!-- Footer -->
      <div class="p-3 border-t border-primary-200 dark:border-primary-700 bg-primary-50 dark:bg-primary-800 rounded-b-xl">
        <div class="flex items-center justify-between text-xs text-primary-500 dark:text-primary-400">
          <span>Use ↑↓ to navigate, ↵ to select, ESC to close</span>
          <span>Press <kbd class="px-1 py-0.5 bg-white dark:bg-primary-700 rounded border">⌘K</kbd> to search</span>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Define the structure for items in the command palette
  interface CommandPaletteItem {
    id: string;
    title: string;
    description?: string; // Optional description for posts
    url: string;
    type: 'post' | 'page' | 'action';
    score?: number; // Score for search relevance
  }

  // Command Palette Class Definition
  class CommandPalette {
    private overlay: HTMLElement;
    private input: HTMLInputElement;
    private results: HTMLElement;
    private loading: HTMLElement;
    private noResults: HTMLElement;
    private defaultItems: HTMLElement;
    private searchResults: HTMLElement;
    private isOpen: boolean = false;
    private selectedIndex: number = -1;
    private items: CommandPaletteItem[] = []; // Holds all fetched items
    private filteredItems: CommandPaletteItem[] = []; // Holds items after filtering by search query

    constructor() {
      // Get references to DOM elements
      this.overlay = document.getElementById('command-palette-overlay')!;
      this.input = document.getElementById('command-palette-input') as HTMLInputElement;
      this.results = document.getElementById('command-palette-results')!;
      this.loading = document.getElementById('command-palette-loading')!;
      this.noResults = document.getElementById('command-palette-no-results')!;
      this.defaultItems = document.getElementById('command-palette-default')!;
      this.searchResults = document.getElementById('command-palette-search-results')!;

      // Initialize the palette and load initial data
      this.init();
      this.loadPosts();
    }

    private init() {
      // Add event listener to open the palette via custom event
      window.addEventListener('openCommandPalette', () => this.open());
      
      // Add event listener to close the palette when the close button is clicked
      const closeButton = document.getElementById('command-palette-close');
      if (closeButton) {
        closeButton.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          this.close();
        });
      }
      
      // Add event listener to close the palette if clicked outside the modal content
      this.overlay.addEventListener('click', (e) => {
        // Close if clicking the overlay or anywhere outside the modal content
        const modalContent = this.overlay.querySelector('.w-full.max-w-2xl');
        if (e.target === this.overlay || (modalContent && !modalContent.contains(e.target as Node))) {
          this.close();
        }
      });

      // Add event listeners for the search input
      this.input.addEventListener('input', (e) => this.handleSearch((e.target as HTMLInputElement).value));
      this.input.addEventListener('keydown', (e) => this.handleKeyDown(e));

      // Add event listener for quick actions (like theme toggle)
      document.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        const actionButton = target.closest('[data-action]');
        if (actionButton) {
          e.preventDefault(); // Prevent default button behavior
          const action = actionButton.getAttribute('data-action');
          this.executeAction(action!);
        }
      });

      // Add global keyboard listener for Escape key to close the palette
      document.addEventListener('keydown', (e) => {
        if (this.isOpen && e.key === 'Escape') {
          this.close();
        }
      });
      
      // Command+K shortcut is handled globally in BaseLayout
    }

    private async loadPosts() {
      try {
        const response = await fetch('/api/posts.json');
        if (response.ok) {
          this.items = await response.json();
        } else {
          console.error('Failed to fetch posts:', response.statusText);
          // Fallback to empty array
          this.items = [];
        }
      } catch (error) {
        console.error('Failed to load posts:', error);
        // Fallback to empty array
        this.items = [];
      }
    }

    private open() {
      this.isOpen = true;
      this.overlay.classList.remove('hidden'); // Show the overlay
      this.input.focus(); // Focus the input field
      this.input.value = ''; // Clear any previous search query
      this.selectedIndex = -1; // Reset selected index
      this.showDefault(); // Show default items initially
      document.body.style.overflow = 'hidden'; // Prevent background scrolling
      // Set initial theme preference
      this.setInitialTheme();
    }

    private close() {
      this.isOpen = false;
      this.overlay.classList.add('hidden'); // Hide the overlay
      this.input.blur(); // Remove focus from input
      document.body.style.overflow = ''; // Allow background scrolling again
    }

    // Methods to control the visibility of different sections within the palette
    private showDefault() {
      this.loading.classList.add('hidden');
      this.noResults.classList.add('hidden');
      this.searchResults.classList.add('hidden');
      this.defaultItems.classList.remove('hidden');
    }

    private showLoading() {
      this.defaultItems.classList.add('hidden');
      this.noResults.classList.add('hidden');
      this.searchResults.classList.add('hidden');
      this.loading.classList.remove('hidden');
    }

    private showNoResults() {
      this.defaultItems.classList.add('hidden');
      this.loading.classList.add('hidden');
      this.searchResults.classList.add('hidden');
      this.noResults.classList.remove('hidden');
    }

    private showSearchResults() {
      this.defaultItems.classList.add('hidden');
      this.loading.classList.add('hidden');
      this.noResults.classList.add('hidden');
      this.searchResults.classList.remove('hidden');
    }

    private handleSearch(query: string) {
      if (!query.trim()) {
        this.showDefault(); // Show default items if query is empty
        return;
      }

      this.showLoading(); // Show loading indicator

      // Simulate a network delay for search results
      setTimeout(() => {
        // Filter items based on the search query (title and description)
        this.filteredItems = this.items.filter(item => {
          const searchText = `${item.title} ${item.description || ''}`.toLowerCase();
          const queryLower = query.toLowerCase();
          return searchText.includes(queryLower);
        });

        if (this.filteredItems.length === 0) {
          this.showNoResults(); // Show "no results" message if no items match
        } else {
          this.renderSearchResults(); // Render the filtered results
          this.showSearchResults(); // Show the search results section
        }
      }, 100); // Adjust delay as needed
    }

    private renderSearchResults() {
      // Clear previous search results
      this.searchResults.innerHTML = '';

      // Create a container for posts results
      const postsContainer = document.createElement('div');
      postsContainer.className = 'p-2';

      // Filter for post type items
      const postItems = this.filteredItems.filter(item => item.type === 'post');

      if (postItems.length > 0) {
        const header = document.createElement('div');
        header.className = 'px-3 py-2 text-xs font-medium text-primary-500 dark:text-primary-400 uppercase tracking-wide';
        header.textContent = `Posts (${postItems.length})`;
        postsContainer.appendChild(header);

        // Map through post items and create anchor elements
        postItems.map((item, index) => {
          const anchor = document.createElement('a');
          anchor.href = item.url;
          anchor.dataset.index = index.toString();
          anchor.className = `command-palette-item w-full flex items-start space-x-3 px-3 py-3 hover:bg-primary-50 dark:hover:bg-primary-800 rounded-lg transition-colors group ${index === this.selectedIndex ? 'bg-primary-50 dark:bg-primary-800' : ''}`;
          
          // Add Lucide icon for file
          const fileIcon = document.createElement('i');
          fileIcon.className = 'w-4 h-4 text-primary-500 dark:text-primary-400 group-hover:text-highlight-500 mt-0.5';
          fileIcon.setAttribute('data-lucide', 'file-text');
          anchor.appendChild(fileIcon);

          // Add container for title and description
          const contentDiv = document.createElement('div');
          contentDiv.className = 'flex-1 min-w-0';

          // Add post title
          const titleSpan = document.createElement('div');
          titleSpan.className = 'text-primary-900 dark:text-primary-50 font-medium';
          titleSpan.textContent = item.title;
          contentDiv.appendChild(titleSpan);

          // Add post description if it exists (and is not a recent post without description)
          if (item.description) {
            const descriptionPara = document.createElement('div');
            descriptionPara.className = 'text-sm text-primary-600 dark:text-primary-300 mt-1 truncate';
            descriptionPara.textContent = item.description;
            contentDiv.appendChild(descriptionPara);
          }

          anchor.appendChild(contentDiv);
          postsContainer.appendChild(anchor);
        });
      }
      
      this.searchResults.appendChild(postsContainer);

      // Re-initialize Lucide icons after adding new elements
      if (window.lucide) {
        lucide.createIcons();
      }
    }

    private handleKeyDown(e: KeyboardEvent) {
      // Get all currently visible command palette items
      const items = this.searchResults.querySelectorAll('.command-palette-item');

      switch (e.key) {
        case 'ArrowDown':
          e.preventDefault(); // Prevent default scrolling behavior
          // Move selection down, clamping to the last item
          this.selectedIndex = Math.min(this.selectedIndex + 1, items.length - 1);
          this.updateSelection(); // Update visual selection
          break;
        case 'ArrowUp':
          e.preventDefault(); // Prevent default scrolling behavior
          // Move selection up, clamping to the first item (-1 means no selection)
          this.selectedIndex = Math.max(this.selectedIndex - 1, -1);
          this.updateSelection(); // Update visual selection
          break;
        case 'Enter':
          e.preventDefault(); // Prevent default form submission/navigation
          this.selectItem(); // Select the highlighted item
          break;
        case 'Escape':
          this.close(); // Close the palette
          break;
      }
    }

    private updateSelection() {
      const items = this.searchResults.querySelectorAll('.command-palette-item');
      items.forEach((item, index) => {
        // Add highlight class to the selected item, remove from others
        if (index === this.selectedIndex) {
          item.classList.add('bg-primary-50', 'dark:bg-primary-800');
        } else {
          item.classList.remove('bg-primary-50', 'dark:bg-primary-800');
        }
      });
    }

    private selectItem() {
      const items = this.searchResults.querySelectorAll('.command-palette-item');
      // If an item is selected, navigate to its URL
      if (this.selectedIndex >= 0 && items[this.selectedIndex]) {
        const item = items[this.selectedIndex] as HTMLAnchorElement;
        window.location.href = item.href;
      }
    }

    private executeAction(action: string) {
      switch (action) {
        case 'toggle-theme':
          // Use global theme toggle function instead of clicking button
          if (window.toggleTheme) {
            window.toggleTheme();
          }
          this.close(); // Close palette after action
          break;
        // Add more actions here as needed
      }
    }

    // Method to set the initial theme based on user preference or system default
    private setInitialTheme() {
      const savedTheme = localStorage.getItem('theme');
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;

      if (savedTheme) {
        document.documentElement.setAttribute('data-theme', savedTheme);
      } else if (prefersDark) {
        document.documentElement.setAttribute('data-theme', 'dark');
        localStorage.setItem('theme', 'dark');
      } else {
        document.documentElement.setAttribute('data-theme', 'light');
        localStorage.setItem('theme', 'light');
      }
    }
  }

  // Function to initialize the command palette
  function initCommandPalette() {
    // Check if the command palette overlay element exists before initializing
    if (document.getElementById('command-palette-overlay')) {
      new CommandPalette();
    }
  }

  // Initialize when the DOM is fully loaded
  document.addEventListener('DOMContentLoaded', initCommandPalette);
</script>