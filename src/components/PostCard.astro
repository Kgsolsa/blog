---
import type { CollectionEntry } from 'astro:content';
import { formatDate, formatDateMobile, processMarkdown, calculateReadingTime, getReadingTimeMobile } from '../utils/markdown';
import { siteConfig } from '../config';
import ImageWrapper from './ImageWrapper.astro';

interface Props {
  post: CollectionEntry<'posts'>;
  featured?: boolean;
  eager?: boolean;
  context?: 'latest' | 'recent' | 'posts' | 'tags';
}

const { post, featured = false, eager = false, context = 'posts' } = Astro.props;

// Get reading time and word count from markdown processing
const { remarkPluginFrontmatter } = await post.render();
const { excerpt, wordCount } = processMarkdown(post.body);
const readingTime = calculateReadingTime(post.body);

const { title, description, date, tags, image, imageAlt } = post.data;

// Determine if we should show the cover image based on configuration and context
const shouldShowCoverImage = (() => {
  // Only check if image exists - hideCoverImage only affects post content, not cards
  if (!post.data.image) {
    return false;
  }

  const showCoverImages = siteConfig.features.showCoverImages;

  switch (showCoverImages) {
    case 'all':
      return true;
    case 'latest':
      return context === 'latest' || featured;
    case 'home':
      return context === 'latest' || context === 'recent';
    case 'posts':
      return context === 'posts' || context === 'tags';
    case 'latest-and-posts':
      return context === 'latest' || context === 'posts' || context === 'tags' || featured;
    case 'none':
    default:
      return false;
  }
})();

// No need for dynamic image import - ImageWrapper handles this
---

<article class={`group ${featured ? 'featured-post' : 'post-card'}`}>
  <a href={`/posts/${post.slug}`} class="block">
    {image && shouldShowCoverImage && (
      <div class="aspect-video overflow-hidden rounded-lg mb-4 bg-primary-100 dark:bg-primary-800">
        <ImageWrapper
          src={image}
          basePath="/posts/images/"
          alt={imageAlt || title}
          class="w-full h-full group-hover:scale-102 dark:group-hover:brightness-100 transition-all duration-300"
          width={800}
          height={450}
          format="webp"
          quality={85}
          loading={featured || eager ? "eager" : "lazy"}
          fetchpriority={featured || eager ? "high" : "auto"}
        />
      </div>
    )}

    <div>
      <div class="flex flex-wrap items-center gap-x-3 gap-y-1 text-sm text-primary-500 dark:text-primary-400 mb-1">
        <time datetime={date.toISOString()}>
          <span class="hidden sm:inline">{formatDate(date)}</span>
          <span class="sm:hidden">{formatDateMobile(date)}</span>
        </time>

        {siteConfig.features.readingTime && readingTime && (
          <>
            <span class="text-primary-300 dark:text-primary-600 hidden sm:inline">•</span>
            <span class="text-primary-300 dark:text-primary-600 sm:hidden">•</span>
            <span>
              <span class="hidden sm:inline">{readingTime.text && readingTime.text !== 'read0' && readingTime.text !== '' ? readingTime.text : '1 min read'}</span>
              <span class="sm:hidden">{getReadingTimeMobile(readingTime)}</span>
            </span>
          </>
        )}

        {siteConfig.features.wordCount && wordCount !== undefined && (
          <>
            <span class="text-primary-300 dark:text-primary-600 hidden sm:inline">•</span>
            <span class="text-primary-300 dark:text-primary-600 sm:hidden">•</span>
            <span class="min-w-0">
              <span class="hidden sm:inline">{wordCount === 1 ? '1 word' : `${wordCount} words`}</span>
              <span class="sm:hidden">{wordCount === 1 ? '1 word' : `${wordCount.toLocaleString()} words`}</span>
            </span>
          </>
        )}
      </div>

      <h3 class={`font-medium text-primary-900 dark:text-primary-100 dark:group-hover:text-highlight-200 transition-colors leading-relaxed ${
        featured ? 'text-lg' : 'text-base'
      }`}>
        {title}
      </h3>

      {featured && description && (
        <p class="text-primary-600 dark:text-primary-300 line-clamp-3 text-sm leading-relaxed mt-1">
          {description}
        </p>
      )}

      {tags && tags.length > 0 && siteConfig.features.tags && (
        <div class="mt-3">
          <div class="flex flex-wrap gap-2">
            {tags.slice(0, 3).map((tag) => (
              <a
                href={`/posts/tag/${tag}`}
                class="text-xs text-primary-600 dark:text-primary-300 bg-primary-100 dark:bg-primary-800 px-2.5 py-1 rounded-full border border-primary-200 dark:border-primary-700 transition-colors hover:bg-highlight-100 dark:hover:bg-highlight-800"
              >
                {tag}
              </a>
            ))}
            {tags.length > 3 && (
              <span class="text-xs text-primary-500 dark:text-primary-400 bg-primary-50 dark:bg-primary-800 px-2.5 py-1 rounded-full border border-primary-200 dark:border-primary-700">
                + {tags.length - 3} more
              </span>
            )}
          </div>
        </div>
      )}
    </div>
  </a>
</article>
