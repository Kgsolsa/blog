---
import type { CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';
import { formatDate, processMarkdown, calculateReadingTime } from '../utils/markdown';
import { optimizePostImagePath } from '../utils/images';
import { siteConfig } from '../config';

interface Props {
  post: CollectionEntry<'posts'>;
  featured?: boolean;
  eager?: boolean;
}

const { post, featured = false, eager = false } = Astro.props;

// Get reading time and word count from markdown processing
const { remarkPluginFrontmatter } = await post.render();
const { excerpt, wordCount } = processMarkdown(post.body);
const readingTime = calculateReadingTime(post.body);

const { title, description, date, tags, image, imageAlt } = post.data;

// Dynamic image import for local images
let localImage: any = null;
if (image && !image.startsWith('http')) {
  try {
    const imagePath = optimizePostImagePath(image).replace('/posts/', '/posts/');
    // Convert public path to src import path
    const importPath = `../..${imagePath}`;
    const images = import.meta.glob('/public/posts/images/*');
    const imageKey = `/public${imagePath}`;
    
    if (images[imageKey]) {
      localImage = await images[imageKey]();
    }
  } catch (error) {
    console.warn('Failed to import image:', image, error);
  }
}
---

<article class={`group ${featured ? 'featured-post' : 'post-card'}`}>
  <a href={`/posts/${post.slug}`} class="block">
    {image && siteConfig.features.showCoverImages && (
      <div class="aspect-video overflow-hidden rounded-lg mb-4 bg-primary-100 dark:bg-primary-800">
        {image.startsWith('http') ? (
          <img
            src={image}
            alt={imageAlt || title}
            class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
            loading={featured || eager ? "eager" : "lazy"}
            decoding="async"
            fetchpriority={featured || eager ? "high" : "auto"}
          />
        ) : localImage ? (
          <Image
            src={localImage.default}
            alt={imageAlt || title}
            width={800}
            height={450}
            format="webp"
            class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
            loading={featured || eager ? "eager" : "lazy"}
            decoding="async"
            fetchpriority={featured || eager ? "high" : "auto"}
          />
        ) : (
          <img
            src={optimizePostImagePath(image)}
            alt={imageAlt || title}
            class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
            loading={featured || eager ? "eager" : "lazy"}
            decoding="async"
            fetchpriority={featured || eager ? "high" : "auto"}
            width="800"
            height="450"
          />
        )}
      </div>
    )}

    <div>
      <div class="flex items-center space-x-3 text-sm text-primary-500 dark:text-primary-400 mb-1">
        <time datetime={date.toISOString()}>
          {formatDate(date)}
        </time>

        {siteConfig.features.readingTime && readingTime && (
          <>
            <span class="text-primary-300 dark:text-primary-600">•</span>
            <span>{readingTime.text && readingTime.text !== 'read0' && readingTime.text !== '' ? readingTime.text : '1 min read'}</span>
          </>
        )}

        {siteConfig.features.wordCount && wordCount !== undefined && (
          <>
            <span class="text-primary-300 dark:text-primary-600">•</span>
            <span>{wordCount === 1 ? '1 word' : `${wordCount} words`}</span>
          </>
        )}
      </div>

      <h2 class={`font-medium text-primary-900 dark:text-primary-50 group-hover:text-highlight-600 dark:group-hover:text-highlight-400 transition-colors leading-relaxed ${
        featured ? 'text-lg' : 'text-base'
      }`}>
        {title}
      </h2>

      {featured && description && (
        <p class="text-primary-600 dark:text-primary-300 line-clamp-3 text-sm leading-relaxed mt-1">
          {description}
        </p>
      )}

      {tags && tags.length > 0 && siteConfig.features.tags && (
        <div class="flex items-start mt-3">
          <div class="flex flex-wrap gap-2 -mx-2.5">
            {tags.slice(0, 3).map((tag) => (
              <a
                href={`/posts/tag/${tag}`}
                class="text-xs text-primary-600 dark:text-primary-300 bg-primary-100 dark:bg-primary-800 px-2.5 py-1 rounded-full border border-primary-200 dark:border-primary-700 transition-colors hover:bg-highlight-100 dark:hover:bg-highlight-800"
              >
                {tag}
              </a>
            ))}
            {tags.length > 3 && (
              <span class="text-xs text-primary-500 dark:text-primary-400 bg-primary-50 dark:bg-primary-800 px-2.5 py-1 rounded-full border border-primary-200 dark:border-primary-700">
                + {tags.length - 3} more
              </span>
            )}
          </div>
        </div>
      )}
    </div>
  </a>
</article>

<style>
  .post-card {
    @apply p-5 bg-white dark:bg-primary-900 rounded-xl border border-primary-200 dark:border-primary-700 hover:border-primary-300 dark:hover:border-primary-600 transition-all duration-200 hover:shadow-lg;
  }

  .featured-post {
    @apply p-6 bg-gradient-to-br from-white to-primary-50 dark:from-primary-900 dark:to-primary-800 rounded-xl border border-primary-200 dark:border-primary-700 hover:border-primary-300 dark:hover:border-primary-600 transition-all duration-200 hover:shadow-xl;
  }
</style>