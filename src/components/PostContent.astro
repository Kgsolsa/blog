---
import type { Post } from '@/types';
import { processImagesForLightbox } from '@/utils/images';
import { siteConfig } from '@/config';
import { formatDate, formatDateMobile, getReadingTimeMobile } from '@/utils/markdown';
import ImageGallery from './ImageGallery.astro';
import TableOfContents from './TableOfContents.astro';
import Button from './Button.astro';
import ImageWrapper from './ImageWrapper.astro';

export interface Props {
  post: Post & {
    Content: any;
    toc: any[];
    readingTime?: any;
    wordCount?: number;
  };
}

const { post } = Astro.props;
const { Content, toc, readingTime, wordCount } = post;

// Process Obsidian bracket syntax in image field
const processedImage = (() => {
  if (!post.data.image) return post.data.image;
  
  // Check if it's Obsidian bracket syntax
  if (post.data.image.startsWith('[[') && post.data.image.endsWith(']]')) {
    // Extract the content inside the brackets
    return post.data.image.slice(2, -2);
  }
  
  return post.data.image;
})();
---

<div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
  <div class="grid grid-cols-1 lg:grid-cols-12 gap-8">
    <!-- Main content -->
    <div class="lg:col-span-8 xl:col-span-9">
      <!-- Article header -->
      <header class="mb-8">
        <h1 class="text-3xl sm:text-4xl font-bold text-primary-900 dark:text-primary-50 mb-6 leading-tight">
          {post.data.title}
        </h1>
        
        <div class="flex flex-wrap items-center gap-x-4 gap-y-2 text-sm text-primary-600 dark:text-primary-300 mb-6">
          <time datetime={post.data.date.toISOString()} class="font-medium">
            <span class="hidden sm:inline">
              {formatDate(post.data.date)}
            </span>
            <span class="sm:hidden">
              {formatDateMobile(post.data.date)}
            </span>
          </time>
          
          {siteConfig.features.readingTime && readingTime && (
            <>
              <span class="hidden sm:inline">•</span>
              <span class="sm:hidden">•</span>
              <span>
                <span class="hidden sm:inline">{readingTime.text}</span>
                <span class="sm:hidden">{getReadingTimeMobile(readingTime)}</span>
              </span>
            </>
          )}
          
          {siteConfig.features.wordCount && wordCount && (
            <>
              <span class="hidden sm:inline">•</span>
              <span class="sm:hidden">•</span>
              <span class="min-w-0">
                <span class="hidden sm:inline">{wordCount.toLocaleString()} words</span>
                <span class="sm:hidden">{wordCount.toLocaleString()} words</span>
              </span>
            </>
          )}
        </div>
        
        {post.data.tags && post.data.tags.length > 0 && siteConfig.features.tags && (
          <div class="flex flex-wrap gap-2 mb-8">
            {post.data.tags.map(tag => (
              <a 
                href={`/posts?tag=${encodeURIComponent(tag)}`}
                class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-primary-100 dark:bg-primary-800 text-primary-800 dark:text-primary-200 hover:bg-primary-200 dark:hover:bg-primary-700 transition-colors"
              >
                #{tag}
              </a>
            ))}
          </div>
        )}
        
        {processedImage && (
          <div class="aspect-video overflow-hidden rounded-xl mb-8">
            <ImageWrapper
              src={processedImage}
              basePath={(() => {
                // Three simple options:
                
                // 1. External URLs - no basePath needed
                if (processedImage.startsWith('http')) {
                  return '';
                }
                
                // 2. Folder-based posts - check if post slug contains dashes (folder-based pattern)
                if (post.slug.includes('-')) {
                  // Check if image is in subdirectory (images/image.jpg)
                  if (processedImage.includes('/')) {
                    return `/posts/${post.slug}/`;
                  }
                  // Image in same folder as index.md
                  return `/posts/${post.slug}/`;
                }
                
                // 3. Regular posts - use global images directory
                return "/posts/images/";
              })()}
              alt={post.data.imageAlt || `Image in post: ${post.data.title}`}
              class="w-full h-full"
              width={1200}
              height={675}
              format={processedImage.endsWith('.svg') ? undefined : "webp"}
              quality={90}
              densities={[1, 2]}
              loading="eager"
              fetchpriority="high"
            />
          </div>
        )}
      </header>
      
      <!-- Article content -->
      <div class="prose dark:prose-dark max-w-none table-responsive">
        <Content />
      </div>
    </div>
    
    <!-- Sidebar -->
    <div class="lg:col-span-4 xl:col-span-3">
      <div class="sticky top-24 space-y-6">
        <!-- Table of Contents -->
        {siteConfig.features.tableOfContents && toc && toc.length > 0 && (
          <TableOfContents headings={toc} />
        )}
        
        <!-- Post meta info -->
        <div class="p-6 bg-primary-50 dark:bg-primary-800/50 rounded-xl">
          <h3 class="font-semibold text-primary-900 dark:text-primary-50 mb-4">
            Post Information
          </h3>
          <div class="space-y-3 text-sm">
            <div class="flex justify-between">
              <span class="text-primary-600 dark:text-primary-300">Published</span>
              <span class="text-primary-900 dark:text-primary-50">
                {formatDate(post.data.date)}
              </span>
            </div>
            
            {readingTime && (
              <div class="flex justify-between">
                <span class="text-primary-600 dark:text-primary-300">Reading time</span>
                <span class="text-primary-900 dark:text-primary-50">{readingTime.text}</span>
              </div>
            )}
            
            {wordCount && (
              <div class="flex justify-between">
                <span class="text-primary-600 dark:text-primary-300">Word count</span>
                <span class="text-primary-900 dark:text-primary-50">{wordCount.toLocaleString()}</span>
              </div>
            )}
            
            {post.data.targetKeyword && (
              <div class="flex justify-between">
                <span class="text-primary-600 dark:text-primary-300">Target keyword</span>
                <span class="text-primary-900 dark:text-primary-50 text-right">{post.data.targetKeyword}</span>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Wrap tables in responsive containers for better mobile experience
  document.addEventListener('DOMContentLoaded', function() {
    const tables = document.querySelectorAll('.prose table');
    tables.forEach(table => {
      if (table.parentElement && !table.parentElement.classList.contains('table-wrapper')) {
        const wrapper = document.createElement('div');
        wrapper.className = 'table-wrapper';
        
        if (table.parentNode) {
          table.parentNode.insertBefore(wrapper, table);
        }
        wrapper.appendChild(table);
        
        // Reset table margin since wrapper handles it
        (table as HTMLElement).style.margin = '0';
      }
    });

    
  });
</script>
