---
import path from "node:path";
import { Image } from "astro:assets";
import { devConfig, isDev } from "@/config/dev";

interface Props {
  id?: string;
  src: string;
  class?: string;
  alt?: string;
  caption?: string;
  position?: string;
  basePath?: string;
  width?: number;
  height?: number;
  format?: "webp" | "avif" | "png" | "jpg" | "jpeg" | "svg";
  quality?: number;
  loading?: "lazy" | "eager";
  decoding?: "async" | "sync" | "auto";
  fetchpriority?: "high" | "low" | "auto";
  densities?: number[];
}

const { 
  id, 
  src, 
  alt = "", 
  caption,
  position = "center", 
  basePath = "/",
  width = 800,
  height = 450,
  format = "webp",
  quality = 85,
  loading = "lazy",
  decoding = "async",
  fetchpriority = "auto",
  densities = [1, 2]
} = Astro.props;

const className = Astro.props.class;

// Determine image type
const isLocal = !(
  src.startsWith("/") ||
  src.startsWith("http") ||
  src.startsWith("https") ||
  src.startsWith("data:")
);
const isPublic = src.startsWith("/");

// Dynamic import for local images
let img: any = null;
let fallbackSrc: string | null = null;
let isImageMissing = false;

if (isLocal) {
  try {
    const files = import.meta.glob<ImageMetadata>("/public/**", {
      import: "default",
    });
    
    // Clean the src path - remove Obsidian brackets if present
    let cleanSrc = src;
    if (cleanSrc.startsWith('[[') && cleanSrc.endsWith(']]')) {
      cleanSrc = cleanSrc.slice(2, -2);
    }
    
    // Remove leading "./" if present for folder-based posts
    if (cleanSrc.startsWith('./')) {
      cleanSrc = cleanSrc.slice(2);
    }
    
    // Remove leading "images/" if present since basePath already includes it
    // But only for global images, not folder-based images
    if (cleanSrc.startsWith('images/') && (basePath === '/posts/images/' || basePath === '/projects/images/' || basePath === '/docs/images/')) {
      cleanSrc = cleanSrc.slice(7);
    }
    
    // Normalize the path for the glob pattern
    let normalizedPath = path
      .normalize(path.join("/public", basePath, cleanSrc))
      .replace(/\\/g, "/");
    
    // Ensure the path starts with /public
    if (!normalizedPath.startsWith("/public")) {
      normalizedPath = `/public${normalizedPath}`;
    }
    
    // Debug logging
    if (isDev && devConfig.images.logMissingImages) {
    }
    
    const file = files[normalizedPath];
    if (file) {
      img = await file();
    } else {
      isImageMissing = true;
      // No fallback images - just mark as missing
    }
  } catch (error) {
    isImageMissing = true;
    // No fallback images - just mark as missing
  }
}

const imageClass = "w-full h-full object-cover";
const imageStyle = `object-position: ${position}`;
---

<div id={id} class:list={[className, 'overflow-hidden relative']}>
  {isLocal && img ? (
    <Image 
      src={img} 
      alt={alt} 
      width={width}
      height={height}
      format={format}
      quality={quality}
      class={imageClass} 
      style={imageStyle}
      loading={loading}
      decoding={decoding}
      fetchpriority={fetchpriority}
      densities={densities}
    />
  ) : isPublic ? (
    <img 
      src={src} 
      alt={alt} 
      class={imageClass} 
      style={imageStyle}
      loading={loading}
      decoding={decoding}
      fetchpriority={fetchpriority}
      width={width}
      height={height}
    />
  ) : isImageMissing ? (
    // Don't render anything for missing local images
    null
  ) : (
    <img 
      src={src} 
      alt={alt} 
      class={imageClass} 
      style={imageStyle}
      loading={loading}
      decoding={decoding}
      fetchpriority={fetchpriority}
      width={width}
      height={height}
    />
  )}
  
  {caption && (
    <figcaption class="mt-2 text-sm text-primary-600 dark:text-primary-400 text-center italic">
      {caption}
    </figcaption>
  )}
</div>
