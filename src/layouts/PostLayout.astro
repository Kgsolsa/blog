---
import type { Post, Heading } from '@/types';
import { siteConfig } from '@/config';
import { generatePostSEO } from '@/utils/seo';
import { optimizePostImagePath } from '@/utils/images';
import { processWikilinksInHTML } from '@/utils/wikilinks';
import { getCollection } from 'astro:content';
import { shouldShowPost, processPost, calculateReadingTime, generateTOC, getAdjacentPosts } from '@/utils/markdown';
import BaseLayout from '@/layouts/BaseLayout.astro';
import TableOfContents from '@/components/TableOfContents.astro';
import LinkedMentions from '@/components/LinkedMentions.astro';
import Icon from '@/components/Icon.astro';
import { Image } from 'astro:assets';

export interface Props {
  post: Post;
}

const { post } = Astro.props;

// Generate SEO data
const seoData = generatePostSEO(post, Astro.site!);

// Debug OG image URL
console.log('Post OG Image URL:', seoData.ogImage?.url);

// Dynamic image import for local images
let localImage: any = null;
if (post.data.image && !post.data.image.startsWith('http')) {
  try {
    const imagePath = optimizePostImagePath(post.data.image);
    const images = import.meta.glob('/public/posts/images/*');
    const imageKey = `/public${imagePath}`;

    if (images[imageKey]) {
      localImage = await images[imageKey]();
    }
  } catch (error) {
    console.warn('Failed to import image:', post.data.image, error);
  }
}

// Generate structured data for the post
const structuredData = {
  "@context": "https://schema.schema.org",
  "@type": "BlogPosting",
  "headline": post.data.title,
  "description": post.data.description,
  "author": {
    "@type": "Person",
    "name": siteConfig.author
  },
  "publisher": {
    "@type": "Organization",
    "name": siteConfig.title,
    "logo": {
      "@type": "ImageObject",
      "url": siteConfig.site + "/favicon.ico"
    }
  },
  "datePublished": post.data.date.toISOString(),
  "dateModified": post.data.date.toISOString(),
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": Astro.url.href
  }
};

// Get all posts for wikilink resolution
const allPosts = await getCollection('posts');
const isDev = import.meta.env.DEV;
const visiblePosts = allPosts.filter(p => shouldShowPost(p, isDev));

// Process the post content and get processed data including word count
const { Content, headings, wordCount, remarkPluginFrontmatter } = await processPost(post);
const readingTime = calculateReadingTime(post.body);

// Generate table of contents if enabled
const shouldShowTOC = siteConfig.features.tableOfContents && headings.length > 0;
const toc = shouldShowTOC ? generateTOC(headings) : [];

// Get adjacent posts for navigation
const { prev: prevPost, next: nextPost } = getAdjacentPosts(visiblePosts, post.slug);
---

<BaseLayout seoData={seoData}>
  <Fragment slot="head">
    <!-- Structured Data -->
    <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />

    <!-- Preload post cover image -->
    {siteConfig.features.showCoverImages && post.data.image && !post.data.hideCoverImage && !post.data.image.startsWith('http') && (
      <link 
        rel="preload" 
        as="image" 
        href={optimizePostImagePath(post.data.image)}
        fetchpriority="high"
      />
    )}

    <!-- Post-specific meta tags -->
    {post.data.targetKeyword && (
      <meta name="keywords" content={post.data.targetKeyword}>
    )}
  </Fragment>

  <div class="py-12 relative">
    <div class="mx-auto px-4 sm:px-6 lg:px-8 relative" style={`max-width: ${siteConfig.layout.contentWidth}`}>
      <!-- Main content -->
      <article>
        <!-- Article header -->
        <header class="mb-8">
          {/* Cover image - shown if global config allows and not hidden by frontmatter */}
          {siteConfig.features.showCoverImages && post.data.image && !post.data.hideCoverImage && (
            post.data.image.startsWith('http') ? (
              <img 
                src={post.data.image}
                alt={post.data.imageAlt || `Cover image for ${post.data.title}`}
                class="w-full h-64 object-cover rounded-lg shadow-sm mb-6"
                width="800"
                height="256"
                loading="eager"
                decoding="async"
                fetchpriority="high"
              />
            ) : localImage ? (
              <Image
                src={localImage.default}
                alt={post.data.imageAlt || `Cover image for ${post.data.title}`}
                width={800}
                height={256}
                format="webp"
                class="w-full h-64 object-cover rounded-lg shadow-sm mb-6"
                loading="eager"
                decoding="async"
                fetchpriority="high"
              />
            ) : (
              <img 
                src={optimizePostImagePath(post.data.image)}
                alt={post.data.imageAlt || `Cover image for ${post.data.title}`}
                class="w-full h-64 object-cover rounded-lg shadow-sm mb-6"
                width="800"
                height="256"
                loading="eager"
                decoding="async"
                fetchpriority="high"
              />
            )
          )}

          <h1 class="text-2xl font-bold text-primary-900 dark:text-primary-50 mb-6 leading-tight">
            {post.data.title}
          </h1>

          <div class="flex flex-wrap items-center gap-4 text-sm text-primary-600 dark:text-primary-300 mb-6">
            <time datetime={post.data.date.toISOString()} class="font-medium">
              {post.data.date.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              })}
            </time>

            {siteConfig.features.readingTime && readingTime && (
              <>
                <span class="text-primary-300 dark:text-primary-600">•</span>
                <span>{readingTime.text && readingTime.text !== 'read0' && readingTime.text !== '' ? readingTime.text : '1 min read'}</span>
              </>
            )}

            {siteConfig.features.wordCount && wordCount !== undefined && (
              <>
                <span class="text-primary-300 dark:text-primary-600">•</span>
                <span>{wordCount === 1 ? '1 word' : `${wordCount} words`}</span>
              </>
            )}
          </div>

          {siteConfig.features.tags && post.data.tags && post.data.tags.length > 0 && (
            <div class="flex flex-wrap gap-2 mb-8">
              {post.data.tags.map(tag => (
                <a
                  href={`/posts?tag=${encodeURIComponent(tag)}`}
                  class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-primary-100 dark:bg-primary-800 text-primary-800 dark:text-primary-200 hover:bg-primary-200 dark:hover:bg-primary-700 hover:text-primary-900 dark:hover:text-primary-100 transition-colors"
                >
                  {tag}
                </a>
              ))}
            </div>
          )}
        </header>

        <!-- Article content -->
        <div class="prose prose-lg dark:prose-dark max-w-none">
          <Content />
        </div>

        {siteConfig.features.linkedMentions && (
          <LinkedMentions currentSlug={post.slug} />
        )}

        <!-- Post navigation -->
        {siteConfig.features.postNavigation && (prevPost || nextPost) && (
          <nav class="mt-16 pt-8 border-t border-primary-200 dark:border-primary-700">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              {prevPost && (
                <div class="text-left">
                  <a
                    href={`/posts/${prevPost.slug}`}
                    class="group block p-4 rounded-lg border border-primary-200 dark:border-primary-700 hover:border-highlight-300 dark:hover:border-highlight-600 transition-all duration-200 hover:shadow-md"
                  >
                    <h3 class="font-semibold text-primary-900 dark:text-primary-50 group-hover:text-highlight-600 dark:group-hover:text-highlight-400 transition-colors">
                      {prevPost.data.title}
                    </h3>
                    <div class="flex justify-start mt-2">
                      <Icon name="arrow-left" class="w-5 h-5 text-primary-500 dark:text-primary-400 group-hover:text-highlight-500 dark:group-hover:text-highlight-400 transition-colors" />
                    </div>
                  </a>
                </div>
              )}

              {nextPost && (
                <div class={`text-right ${!prevPost ? 'md:col-start-2' : ''}`}>
                  <a
                    href={`/posts/${nextPost.slug}`}
                    class="group block p-4 rounded-lg border border-primary-200 dark:border-primary-700 hover:border-highlight-300 dark:hover:border-highlight-600 transition-all duration-200 hover:shadow-md"
                  >
                    <h3 class="font-semibold text-primary-900 dark:text-primary-50 group-hover:text-highlight-600 dark:group-hover:text-highlight-400 transition-colors">
                      {nextPost.data.title}
                    </h3>
                    <div class="flex justify-end mt-2">
                      <Icon name="arrow-right" class="w-5 h-5 text-primary-500 dark:text-primary-400 group-hover:text-highlight-500 dark:group-hover:text-highlight-400 transition-colors" />
                    </div>
                  </a>
                </div>
              )}
            </div>
          </nav>
        )}
      </article>

      <!-- Desktop TOC - floats to the right of the content container -->
      {shouldShowTOC && (
        <div class="hidden xl:block absolute top-0 left-full ml-8 w-64">
          <div class="top-24">
            <TableOfContents headings={toc} />
          </div>
        </div>
      )}
    </div>
  </div>

  <Fragment slot="scripts">
    <script define:vars={{ posts: visiblePosts }}>
      // Process wikilinks and initialize layouts after content loads
      document.addEventListener('DOMContentLoaded', () => {

        // Initialize image grid layouts
        function initializeImageGrids() {
          // Find all paragraphs that contain only images (including Image component output)
          const paragraphs = document.querySelectorAll('.prose p');

          paragraphs.forEach(p => {
            const images = p.querySelectorAll('img, picture');
            const textNodes = Array.from(p.childNodes).filter(node => 
              node.nodeType === Node.TEXT_NODE && node.textContent.trim() !== ''
            );
            const otherElements = Array.from(p.childNodes).filter(node => 
              node.nodeType === Node.ELEMENT_NODE && !['IMG', 'PICTURE', 'BR'].includes(node.tagName)
            );

            // Only process if paragraph contains 2+ images and no other meaningful content
            if (images.length >= 2 && textNodes.length === 0 && otherElements.length === 0) {
              // Remove any existing image-grid classes first
              p.classList.remove('image-grid', 'image-grid-2', 'image-grid-3', 'image-grid-4', 'image-grid-5', 'image-grid-6');

              // Add the appropriate grid class
              const gridClass = `image-grid-${Math.min(images.length, 6)}`;
              p.classList.add('image-grid', gridClass);
            }
          });
        }

        // Initialize image grids
        initializeImageGrids();
        const wikilinks = document.querySelectorAll('.wikilink[data-wikilink]');

        wikilinks.forEach(link => {
          const linkText = link.dataset.wikilink;
          const displayOverride = link.dataset.displayOverride;

          if (!displayOverride || displayOverride === 'null') {
            // Find the post title to use as display text
            const slug = linkText.toLowerCase()
              .replace(/[^a-z0-9\s-]/g, '')
              .replace(/\s+/g, '-')
              .replace(/-+/g, '-')
              .replace(/^-+|-+$/g, '');

            const post = posts.find(p => p.slug === slug);
            if (post) {
              link.textContent = post.data.title;
              link.href = `/posts/${post.slug}`;
            } else {
              // Mark as broken link
              link.classList.add('wikilink-broken');
              link.title = 'Link not found';
            }
          }
        });
      });
    </script>
  </Fragment>
</BaseLayout>