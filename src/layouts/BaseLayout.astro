
---
import { ViewTransitions } from 'astro:transitions';
import { siteConfig, getFontFamily, getGoogleFontsUrl } from '@/config';
import type { SEOData } from '@/types';
import Header from '@/components/Header.astro';
import Footer from '@/components/Footer.astro';
import CommandPalette from '@/components/CommandPalette.astro';
import ScrollToTop from '@/components/ScrollToTop.astro';
import Lightbox from '@/components/Lightbox.astro';
import '@/styles/global.css';

export interface Props {
  seoData: SEOData;
  bodyClass?: string;
}

const { seoData, bodyClass = '' } = Astro.props;
---

<!DOCTYPE html>
<html lang={siteConfig.language} class="scrollbar-hide">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <!-- SEO Meta Tags -->
  <title>{seoData.title}</title>
  <meta name="description" content={seoData.description}>
  <link rel="canonical" href={seoData.canonical}>

  <!-- Robots meta tag -->  
  {seoData.noIndex && (
    <meta name="robots" content="noindex, nofollow">  
  )}

  <!-- Open Graph -->
  <meta property="og:title" content={seoData.title}>
  <meta property="og:description" content={seoData.description}>
  <meta property="og:url" content={seoData.canonical}>
  <meta property="og:type" content={seoData.ogType}>
  <meta property="og:site_name" content={siteConfig.title}>

  {seoData.ogImage ? (
    <>
      <meta property="og:image" content={seoData.ogImage.url}>
      <meta property="og:image:alt" content={seoData.ogImage.alt}>
      <meta property="og:image:width" content={seoData.ogImage.width.toString()}>
      <meta property="og:image:height" content={seoData.ogImage.height.toString()}>
    </>
  ) : (
    <>
      <meta property="og:image" content="/open-graph.png">
      <meta property="og:image:alt" content={siteConfig.seo.defaultOgImageAlt}>
      {/* Assuming default image dimensions, adjust if known */}
      <meta property="og:image:width" content="1200">
      <meta property="og:image:height" content="630">
    </>
  )}

  <!-- Twitter Card -->
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content={seoData.title}>
  <meta name="twitter:description" content={seoData.description}>
  {seoData.ogImage ? (
    <>
      <meta name="twitter:image" content={seoData.ogImage.url}>
      <meta name="twitter:image:alt" content={seoData.ogImage.alt}>
    </>
  ) : (
    <>
      <meta name="twitter:image" content="/open-graph.png">
      <meta name="twitter:image:alt" content={siteConfig.seo.defaultOgImageAlt}>
    </>
  )}


  <!-- Article specific meta tags -->
  {seoData.ogType === 'article' && (
    <>
      {seoData.publishedTime && <meta property="article:published_time" content={seoData.publishedTime}>}
      {seoData.modifiedTime && <meta property="article:modified_time" content={seoData.modifiedTime}>}
      {seoData.tags && seoData.tags.map(tag => (
        <meta property="article:tag" content={tag}>
      ))}
    </>
  )}

  <!-- Default favicon (will be updated by JavaScript) -->
  <link rel="icon" href="/favicon.png" />

  <!-- Command Palette Config for Client Script -->
  <meta name="command-palette-shortcut" content={siteConfig.commandPalette.shortcut || ''}>

  <!-- Preconnect to external domains for faster resource loading -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link rel="preconnect" href="https://cdnjs.cloudflare.com">
  
  <!-- Fonts with optimized loading -->
  <link href={getGoogleFontsUrl(siteConfig.typography.headingFont, siteConfig.typography.proseFont)} rel="stylesheet" media="print" onload="this.media='all'">
  <noscript><link href={getGoogleFontsUrl(siteConfig.typography.headingFont, siteConfig.typography.proseFont)} rel="stylesheet"></noscript>

  <!-- Font Awesome Icons - Load asynchronously -->
  <link rel="preload" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
  <noscript><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"></noscript>

  <!-- Swup handled via Astro integration -->
  
  <!-- Font CSS Variables -->
  <style define:vars={{
    fontHeading: getFontFamily(siteConfig.typography.headingFont),
    fontProse: getFontFamily(siteConfig.typography.proseFont)
  }}>
    :root {
      --font-heading: var(--fontHeading);
      --font-prose: var(--fontProse);
    }
  </style>

  <!-- Theme initialization script -->
  <script is:inline>
    // Initialize theme before page renders to prevent flash
    function initTheme() {
      const stored = localStorage.getItem('theme');
      const system = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      const theme = stored || system;

      document.documentElement.classList.remove('light', 'dark');
      document.documentElement.classList.add(theme);
    }

    // Initialize immediately
    initTheme();

    // Set favicon based on system theme
    function setFavicon() {
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      const prefersLight = window.matchMedia('(prefers-color-scheme: light)').matches;
      
      let faviconUrl;
      if (prefersDark) {
        faviconUrl = '/favicon-dark.png';
      } else if (prefersLight) {
        faviconUrl = '/favicon-light.png';
      } else {
        faviconUrl = '/favicon.png';
      }
      
      // Remove ALL existing favicon links
      const existingFavicons = document.querySelectorAll('link[rel="icon"]');
      existingFavicons.forEach(link => link.remove());
      
      // Create new favicon link
      const faviconLink = document.createElement('link');
      faviconLink.rel = 'icon';
      faviconLink.type = 'image/png';
      faviconLink.href = `${faviconUrl}?v=${Date.now()}`;
      document.head.appendChild(faviconLink);
      
      // Force favicon refresh by updating page title
      const originalTitle = document.title;
      document.title = originalTitle;
    }

    // Set favicon on page load
    setFavicon();

    // View Transitions disabled - no need for astro:page-load

    // Listen for system theme changes
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
      if (window.location.hostname === 'localhost' || window.location.hostname.includes('localhost')) {
      }
      if (!localStorage.getItem('theme')) {
        const newTheme = e.matches ? 'dark' : 'light';
        localStorage.setItem('theme', newTheme);
        initTheme();
      } else {
        if (window.location.hostname === 'localhost' || window.location.hostname.includes('localhost')) {
        }
      }
      // Always update favicon based on system theme, regardless of user's manual theme choice
      setFavicon();
    });

    // Global theme toggle function - always available regardless of button visibility
    function toggleTheme() {
      const html = document.documentElement;
      const isDark = html.classList.contains('dark');
      const newTheme = isDark ? 'light' : 'dark';

      // Update theme
      localStorage.setItem('theme', newTheme);
      html.classList.remove('light', 'dark');
      html.classList.add(newTheme);

      // Dispatch theme change event
      window.dispatchEvent(new CustomEvent('themechange', {
        detail: { theme: newTheme }
      }));
    }

    // Make toggle function globally accessible
    window.toggleTheme = toggleTheme;

    // Global function to restore scroll functionality
    function restoreScroll() {
      document.body.style.overflow = '';
      document.documentElement.classList.remove('force-scroll-top');
      // Force a reflow to ensure changes take effect
      document.body.offsetHeight;
    }

    // Make restoreScroll globally accessible
    window.restoreScroll = restoreScroll;

    // Global comments initialization function - Swup compatible
    function initializeGiscusComments() {
      
      // Check if comments are enabled in config
      if (!window.commentsEnabled) {
        return;
      }
      
      // Check if comments container exists
      const commentsContainer = document.querySelector('#giscus-comments');
      if (!commentsContainer) {
        return;
      }

      // CRITICAL: Clear the entire container content first
      commentsContainer.innerHTML = '';
      
      // Remove any existing Giscus scripts from the entire document
      const existingScripts = document.querySelectorAll('script[src*="giscus.app"]');
      existingScripts.forEach(script => {
        script.remove();
      });

      // Remove any existing Giscus iframes from the entire document
      const existingIframes = document.querySelectorAll('iframe[src*="giscus"]');
      existingIframes.forEach(iframe => {
        iframe.remove();
      });

      
      // Clear any error state
      commentsContainer.removeAttribute('data-error');
      
      // Create a fresh Giscus script
      const script = document.createElement('script');
      script.src = 'https://giscus.app/client.js';
      script.async = true;
      script.crossOrigin = 'anonymous';
      
      // Get configuration from data attributes
      const containerElement = commentsContainer;
      const repo = containerElement.dataset.repo || '';
      const repoId = containerElement.dataset.repoId || '';
      const category = containerElement.dataset.category || '';
      const categoryId = containerElement.dataset.categoryId || '';
      const mapping = containerElement.dataset.mapping || 'pathname';
      const strict = containerElement.dataset.strict || '0';
      const reactionsEnabled = containerElement.dataset.reactionsEnabled || '1';
      const metadata = containerElement.dataset.metadata || '0';
      const inputPosition = containerElement.dataset.inputPosition || 'bottom';
      const theme = containerElement.dataset.theme || 'preferred_color_scheme';
      const lang = containerElement.dataset.lang || 'en';
      const loading = containerElement.dataset.loading || 'lazy';
      
      script.setAttribute('data-repo', repo);
      script.setAttribute('data-repo-id', repoId);
      script.setAttribute('data-category', category);
      script.setAttribute('data-category-id', categoryId);
      script.setAttribute('data-mapping', mapping);
      script.setAttribute('data-strict', strict);
      script.setAttribute('data-reactions-enabled', reactionsEnabled);
      script.setAttribute('data-emit-metadata', metadata);
      script.setAttribute('data-input-position', inputPosition);
      script.setAttribute('data-theme', theme);
      script.setAttribute('data-lang', lang);
      script.setAttribute('data-loading', loading);
      
      script.onload = function() {
        
        // Auto-scroll to comments section after GitHub sign-in
        // This helps users find the comments after authentication
        setTimeout(() => {
          const commentsContainer = document.querySelector('#giscus-comments');
          if (commentsContainer) {
            // Check if we're returning from GitHub OAuth (common pattern)
            const urlParams = new URLSearchParams(window.location.search);
            const isOAuthReturn = urlParams.has('code') || urlParams.has('state') || 
                                 window.location.hash.includes('giscus') ||
                                 document.referrer.includes('github.com') ||
                                 document.referrer.includes('giscus.app');
            
            if (isOAuthReturn) {
              commentsContainer.scrollIntoView({ 
                behavior: 'smooth', 
                block: 'start' 
              });
            }
          }
        }, 1000); // Delay to allow Giscus to fully load
        
        // Simple iframe load detection (no auto-scroll)
        const checkForGiscusIframe = () => {
          const giscusIframe = document.querySelector('iframe[src*="giscus"]');
          if (giscusIframe) {
            giscusIframe.addEventListener('load', () => {
            });
          } else {
            // If iframe not ready yet, check again in a bit
            setTimeout(checkForGiscusIframe, 500);
          }
        };
        
        checkForGiscusIframe();
      };
      
      script.onerror = function() {
        commentsContainer.setAttribute('data-error', 'true');
      };
      
      // Append to the container
      commentsContainer.appendChild(script);
    };

    // Make the function globally accessible
    window.initializeGiscusComments = initializeGiscusComments;

    // Collapsible callouts functionality
    function initializeCollapsibleCallouts() {
      const collapsibleCallouts = document.querySelectorAll('.callout-collapsible');
      
      collapsibleCallouts.forEach(callout => {
        const toggleButton = callout.querySelector('.callout-toggle');
        const content = callout.querySelector('.callout-content');
        
        if (!toggleButton || !content) return;
        
        // Add click handler to toggle button
        toggleButton.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          
          const isCollapsed = callout.classList.contains('callout-collapsed');
          
          if (isCollapsed) {
            // Expand
            callout.classList.remove('callout-collapsed');
            content.style.display = '';
            toggleButton.setAttribute('aria-expanded', 'true');
          } else {
            // Collapse
            callout.classList.add('callout-collapsed');
            content.style.display = 'none';
            toggleButton.setAttribute('aria-expanded', 'false');
          }
        });
        
        // Add click handler to title for easier interaction
        const title = callout.querySelector('.callout-title');
        if (title) {
          title.addEventListener('click', (e) => {
            // Only trigger if not clicking the toggle button
            if (!e.target.closest('.callout-toggle')) {
              toggleButton.click();
            }
          });
        }
      });
    }

    // Initialize collapsible callouts when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeCollapsibleCallouts);
    } else {
      initializeCollapsibleCallouts();
    }
  </script>

  <!-- View Transitions - temporarily disabled to fix compiler issues -->
  <!-- <ViewTransitions /> -->

  <!-- Additional head content -->
  <slot name="head" />
  
</head>

<body class={`min-h-screen bg-white dark:bg-primary-950 text-primary-900 dark:text-primary-50 text-selection-highlight transition-colors duration-200 flex flex-col ${bodyClass}`}>
  <!-- Skip to main content -->
  <a href="#main-content" class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 btn-primary px-4 py-2 rounded-md z-50">
    Skip to main content
  </a>

  <!-- Header -->
  <Header />

  <!-- Main content -->
  <main id="main-content" class="container mx-auto relative flex-grow" style={`max-width: ${siteConfig.layout.contentWidth}`}>
    <div id="swup-container" class="transition-swup-fade">
      <slot />
    </div>
  </main>

  <!-- Footer -->
  <Footer />

  <!-- Command Palette -->
  {siteConfig.commandPalette.enabled && <CommandPalette />}

  <!-- Scroll to Top -->
  {siteConfig.scrollToTop && <ScrollToTop />}


  <!-- Global scripts - Defer non-critical JavaScript -->
  <script define:vars={{ commentsEnabled: siteConfig.postOptions.comments.enabled }} defer>
    // Logger removed - no console output in production

    // Define isDev in client-side JavaScript (always false in production)
    const isDev = false;

    // Set window.commentsEnabled for client-side access
    window.commentsEnabled = commentsEnabled;

    // Update navigation highlighting based on current page
    function updateNavigationHighlighting(targetPath) {
      const currentPath = targetPath || window.location.pathname;
      
      // Target both desktop and mobile navigation links
      const navLinks = document.querySelectorAll('header nav a, #mobile-menu nav a');
      
      navLinks.forEach((link) => {
        const linkPath = link.getAttribute('href');
        
        if (linkPath) {
          // Remove ALL existing classes that could conflict
          link.classList.remove('active', 'current', 'bg-highlight-100', 'dark:bg-highlight-900', 'text-highlight-600', 'dark:text-highlight-400', 'bg-highlight-50', 'dark:bg-highlight-900/20', 'text-primary-600', 'dark:text-primary-300', 'text-primary-500', 'dark:text-primary-400');
          
          // Check if this link matches the current page
          let isActive = false;
          
          if (linkPath === currentPath) {
            // Exact match
            isActive = true;
          } else if (linkPath === '/' && currentPath === '/') {
            // Homepage exact match
            isActive = true;
          } else if (linkPath !== '/' && linkPath !== '#' && !linkPath.startsWith('http')) {
            // For internal links, only match exact paths or paths with trailing slash
            // This prevents /posts from matching /posts/something
            const normalizedLinkPath = linkPath.endsWith('/') ? linkPath : linkPath + '/';
            const normalizedCurrentPath = currentPath.endsWith('/') ? currentPath : currentPath + '/';
            
            // Only match if it's an exact match (including trailing slash normalization)
            isActive = normalizedLinkPath === normalizedCurrentPath;
          }
          
          if (isActive) {
            // Add appropriate active classes based on navigation style
            const isMobile = link.closest('#mobile-menu');
            
            if (isMobile) {
              // Mobile navigation active classes
              link.classList.add('text-highlight-600', 'dark:text-highlight-400', 'bg-highlight-50', 'dark:bg-highlight-900/20');
            } else {
              // Desktop navigation active classes
              link.classList.add('text-highlight-600', 'dark:text-highlight-400');
            }
          } else {
            // Ensure inactive state classes are applied
            const isMobile = link.closest('#mobile-menu');
            
            if (isMobile) {
              // Mobile navigation inactive classes
              link.classList.add('text-primary-600', 'dark:text-primary-300');
            } else {
              // Desktop navigation inactive classes - check if it's minimal style
              const nav = link.closest('nav');
              const isMinimal = nav && Array.from(nav.classList).some(cls => cls.includes('space-x-4'));
              
              if (isMinimal) {
                link.classList.add('text-primary-500', 'dark:text-primary-400');
              } else {
                link.classList.add('text-primary-600', 'dark:text-primary-300');
              }
            }
          }
        }
      });
    }

    // Make function globally accessible
    window.updateNavigationHighlighting = updateNavigationHighlighting;
    
    // Test the function immediately
    updateNavigationHighlighting();

    // Initialize comments and table wrappers on page load
    document.addEventListener('DOMContentLoaded', () => {
      if (isDev) {
      }
      if (document.querySelector('#giscus-comments')) {
        if (isDev) {
        }
        window.initializeGiscusComments();
      }
      // Initialize table wrappers on initial page load
      window.initializeTableWrappers();
      
      // Initialize linked mentions on initial page load
      if (window.initializeLinkedMentions) {
        window.initializeLinkedMentions();
      }
      
      // Setup smooth scrolling for anchor links
      setupSmoothScrolling();
      
      // Handle initial hash scroll (if URL has hash)
      handleInitialHashScroll();
    });

    // Command Palette Keyboard Shortcut Handler
    function setupCommandPaletteShortcut() {
      // Get the shortcut from the meta tag
      const shortcutMeta = document.querySelector('meta[name="command-palette-shortcut"]');
      if (!shortcutMeta) return;
      
      const shortcut = shortcutMeta.getAttribute('content');
      if (!shortcut || shortcut.trim() === '') return;
      
      // Parse the shortcut (e.g., "ctrl+e" -> {ctrl: true, key: "e"})
      const parts = shortcut.toLowerCase().split('+').map(p => p.trim());
      const modifiers = {
        ctrl: parts.includes('ctrl') || parts.includes('control'),
        alt: parts.includes('alt'),
        shift: parts.includes('shift'),
        meta: parts.includes('meta') || parts.includes('cmd') || parts.includes('command')
      };
      
      // Get the main key (last part)
      const key = parts[parts.length - 1];
      if (!key) return;
      
      // Add global keyboard listener
      document.addEventListener('keydown', (e) => {
        // Check if all required modifiers are pressed
        const modifiersMatch = modifiers.ctrl === e.ctrlKey &&
                              modifiers.alt === e.altKey &&
                              modifiers.shift === e.shiftKey &&
                              modifiers.meta === e.metaKey;
        
        // Check if the key matches (case insensitive)
        const keyMatch = e.key.toLowerCase() === key.toLowerCase();
        
        // Only trigger if we're not in an input field, textarea, or contenteditable
        const isInputField = e.target.tagName === 'INPUT' ||
                            e.target.tagName === 'TEXTAREA' ||
                            e.target.contentEditable === 'true' ||
                            e.target.isContentEditable;
        
        if (modifiersMatch && keyMatch && !isInputField) {
          e.preventDefault();
          e.stopPropagation();
          
          // Dispatch the openCommandPalette event
          const event = new CustomEvent('openCommandPalette');
          window.dispatchEvent(event);
        }
      });
    }

    // Setup command palette shortcut when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', setupCommandPaletteShortcut);
    } else {
      setupCommandPaletteShortcut();
    }

    // CRITICAL: Listen for Swup page transitions using hooks API
    // Wait for Swup to be available
    let swupRetryCount = 0;
    const maxSwupRetries = 50; // Max 5 seconds of retries
    
    function setupSwupHooks() {
      if (window.swup) {
        if (isDev) {
        }
        
        // Use the correct Swup hooks API
        window.swup.hooks.on('content:replace', () => {
          if (isDev) {
          }
          // Close any open lightbox before content replacement
          if (window.lightboxInstance && window.lightboxInstance.isOpen) {
            window.lightboxInstance.closeLightbox();
          }
          // Reinitialize favicon after page transition
          setFavicon();
          // Initialize table wrappers after content replacement
          setTimeout(() => {
            if (document.querySelector('#giscus-comments')) {
              window.initializeGiscusComments();
            }
            // Initialize table wrappers
            window.initializeTableWrappers();
            // Initialize linked mentions
            if (window.initializeLinkedMentions) {
              window.initializeLinkedMentions();
            }
            // Initialize image galleries
            if (typeof window['initializeImageGalleries'] === 'function') {
              window['initializeImageGalleries']();
            }
            // Initialize category filtering
            if (typeof window['initializeCategoryFiltering'] === 'function') {
              window['initializeCategoryFiltering']();
            }
            // Re-setup smooth scrolling for anchor links
            setupSmoothScrolling();
          }, 100);
        });

        window.swup.hooks.on('page:view', () => {
          if (isDev) {
          }
          setTimeout(() => {
            if (document.querySelector('#giscus-comments')) {
              window.initializeGiscusComments();
            }
            // Initialize table wrappers
            window.initializeTableWrappers();
            // Initialize linked mentions
            if (window.initializeLinkedMentions) {
              window.initializeLinkedMentions();
            }
            // Initialize category filtering
            if (typeof window['initializeCategoryFiltering'] === 'function') {
              window['initializeCategoryFiltering']();
            }
            // Re-setup smooth scrolling for anchor links
            setupSmoothScrolling();
          }, 100);
        });

        // Favicon is handled by CSS media queries - no JavaScript needed
      } else if (swupRetryCount < maxSwupRetries) {
        swupRetryCount++;
        if (isDev) {
        }
        setTimeout(setupSwupHooks, 100);
      } else {
        if (isDev) {
        }
      }
    }

    // Start setting up Swup hooks
    setupSwupHooks();

    // Favicon is now handled by CSS media queries - no JavaScript needed

    // FALLBACK: Use MutationObserver to detect when comments container appears
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'childList') {
          mutation.addedNodes.forEach((node) => {
            if (node.nodeType === Node.ELEMENT_NODE) {
              const element = node;
              // Check if the added node or its children contain the comments container
              if (element.id === 'giscus-comments' || element.querySelector('#giscus-comments')) {
                if (isDev) {
                }
                setTimeout(() => {
                  window.initializeGiscusComments();
                }, 200);
              }
            }
          });
        }
      });
    });

    // Start observing the swup container for changes
    const swupContainer = document.querySelector('#swup-container');
    if (swupContainer) {
      observer.observe(swupContainer, {
        childList: true,
        subtree: true
      });
      if (isDev) {
      }
    }

    // AGGRESSIVE FALLBACK: Check for comments on every navigation click
    document.addEventListener('click', (event) => {
      const target = event.target;
      if (!target) return;
      
      // Check if it's a navigation link
      const href = target.getAttribute('href');
      if (target.tagName === 'A' && href && !href.startsWith('#')) {
        if (isDev) {
        }
        // Delay to allow Swup to process the navigation
        setTimeout(() => {
          if (document.querySelector('#giscus-comments')) {
            if (isDev) {
            }
            window.initializeGiscusComments();
          }
        }, 500);
      }
    });

    // Global image preloader to prevent reloading across navigation
    class ImagePreloader {
      constructor() {
        this.loadedImages = new Set();
        this.preloadedImages = new Map();
      }

      preloadImage(src, priority = 'low') {
        return new Promise((resolve, reject) => {
          if (this.loadedImages.has(src)) {
            resolve(undefined);
            return;
          }

          if (this.preloadedImages.has(src)) {
            resolve(undefined);
            return;
          }

          const img = new Image();
          img.crossOrigin = 'anonymous';
          img.loading = priority === 'high' ? 'eager' : 'lazy';

          img.onload = () => {
            this.loadedImages.add(src);
            this.preloadedImages.set(src, img);
            resolve(undefined);
          };

          img.onerror = () => {
            reject(new Error(`Failed to load image: ${src}`));
          };

          img.src = src;
        });
      }

      preloadAllImages() {
        const images = document.querySelectorAll('img[src*="/_image"]');
        images.forEach((img, index) => {
          if (img instanceof HTMLImageElement) {
            const priority = index < 3 ? 'high' : 'low';
            this.preloadImage(img.src, priority).catch((error) => {
            });
          }
        });
      }
    }

    // Initialize global preloader
    window.imagePreloader = new ImagePreloader();

    // Initialize table wrappers for responsive tables
    function initializeTableWrappers() {
      const tables = document.querySelectorAll('.prose table');
      tables.forEach(table => {
        if (!table.parentElement?.classList.contains('table-wrapper')) {
          const wrapper = document.createElement('div');
          wrapper.className = 'table-wrapper';
          // Let CSS handle the styling instead of inline styles
          
          table.parentNode?.insertBefore(wrapper, table);
          wrapper.appendChild(table);
          
          // Reset table margin since wrapper handles it
          table.style.margin = '0';
        }
      });
    }

    // Make initializeTableWrappers globally accessible
    window.initializeTableWrappers = initializeTableWrappers;


    // Handle smooth scrolling for anchor links (same-page only)
    function setupSmoothScrolling() {
      // Remove any existing event listeners to avoid duplicates
      const existingLinks = document.querySelectorAll('a[href^="#"]:not([href="/"]):not([href^="/"])');
      existingLinks.forEach(link => {
        link.removeEventListener('click', handleAnchorClick);
      });
      
      // Only handle anchor links that are NOT navigation links
      const anchorLinks = document.querySelectorAll('a[href^="#"]:not([href="/"]):not([href^="/"])');
      
      anchorLinks.forEach(link => {
        link.addEventListener('click', handleAnchorClick);
      });
    }

    // Handle anchor link clicks with smooth scrolling
    function handleAnchorClick(e) {
      const href = e.target.getAttribute('href');
      if (href && href.startsWith('#') && href.length > 1) {
        const targetElement = document.querySelector(href);
        if (targetElement) {
          e.preventDefault();
          
          // DON'T update URL - let the browser handle it naturally
          // This prevents interfering with browser history
          
          // Custom smooth scroll animation
          const targetPosition = targetElement.offsetTop - 100; // Account for header
          const startPosition = window.pageYOffset;
          const distance = targetPosition - startPosition;
          const duration = 800; // 800ms duration
          let start = null;

          function step(timestamp) {
            if (!start) start = timestamp;
            const progress = timestamp - start;
            const percentage = Math.min(progress / duration, 1);
            
            // Easing function (ease-in-out)
            const easeInOut = percentage < 0.5 
              ? 2 * percentage * percentage 
              : 1 - Math.pow(-2 * percentage + 2, 2) / 2;
            
            window.scrollTo(0, startPosition + distance * easeInOut);
            
            if (progress < duration) {
              requestAnimationFrame(step);
            }
          }
          
          requestAnimationFrame(step);
        }
      }
    }

    // Handle URL hash scrolling on page load (start at top, then smooth scroll)
    function handleInitialHashScroll() {
      const hash = window.location.hash;
      if (hash && hash.length > 1) {
        // First, scroll to top instantly
        window.scrollTo(0, 0);
        
        // Then wait a bit and smooth scroll to target
        setTimeout(() => {
          const targetElement = document.querySelector(hash);
          if (targetElement) {
            // Custom smooth scroll animation
            const targetPosition = targetElement.offsetTop - 100; // Account for header
            const startPosition = window.pageYOffset;
            const distance = targetPosition - startPosition;
            const duration = 800; // 800ms duration
            let start = null;

            function step(timestamp) {
              if (!start) start = timestamp;
              const progress = timestamp - start;
              const percentage = Math.min(progress / duration, 1);
              
              // Easing function (ease-in-out)
              const easeInOut = percentage < 0.5 
                ? 2 * percentage * percentage 
                : 1 - Math.pow(-2 * percentage + 2, 2) / 2;
              
              window.scrollTo(0, startPosition + distance * easeInOut);
              
              if (progress < duration) {
                requestAnimationFrame(step);
              }
            }
            
            requestAnimationFrame(step);
          }
        }, 100);
      }
    }


    // Handle browser back/forward button - restore scroll position naturally
    function handlePopState() {
      // Small delay to ensure content is loaded
      setTimeout(() => {
        // Let the browser handle scroll position restoration naturally
        // Don't force scroll to top - this preserves user's previous scroll position
        
        // Reinitialize components after back/forward navigation
        if (window.initializeImageGrids) {
          window.initializeImageGrids();
        }
        if (window.initializeTableWrappers) {
          window.initializeTableWrappers();
        }
        // Don't call setupSmoothScrolling() here - let browser handle scroll naturally
      }, 50);
    }

    // Listen for browser back/forward button
    window.addEventListener('popstate', handlePopState);

    // Simple scroll behavior: let browser handle everything naturally
    function setupSwupScrollBehavior() {
      if (typeof window !== 'undefined' && window.swup) {
        const swup = window.swup;
        
        // Completely disable all scroll behavior - let browser handle it naturally
        swup.hooks.on('page:view', () => {
          // Do nothing - let browser handle scroll position naturally
          // Still update navigation highlighting and linked mentions
          updateNavigationHighlighting();
          if (window.initializeLinkedMentions) {
            window.initializeLinkedMentions();
          }
        });
        
        swup.hooks.on('visit:end', () => {
          // Update navigation highlighting after page transition is complete
          updateNavigationHighlighting();
          // Initialize linked mentions after page transition is complete
          if (window.initializeLinkedMentions) {
            window.initializeLinkedMentions();
          }
          // Don't call handleInitialHashScroll() here - it interferes with back/forward navigation
        });
        
      }
    }


    if (typeof window !== 'undefined') {
      // Setup smooth scrolling when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', setupSmoothScrolling);
      } else {
        setupSmoothScrolling();
      }
    }

    // Setup Swup behavior when available
    if (typeof window !== 'undefined') {
      if (window.swup) {
        setupSwupScrollBehavior();
      } else {
        // Wait for Swup to be available
        document.addEventListener('swup:enable', setupSwupScrollBehavior);
      }
    }
  </script>

  <!-- Simple Image Gallery System -->
  <script>
    // Declare global function
    declare global {
      interface Window {
        initializeImageGalleries: () => void;
        lightboxInstance: any;
      }
    }
    
    function initializeImageGalleries() {
      const contentElement = document.querySelector('.prose');
      if (!contentElement) {
        return;
      }
      const paragraphs = contentElement.querySelectorAll('p');
      
      // Find all paragraphs with images (single or multiple)
      const imageParagraphs: { paragraph: Element; index: number; imageCount: number }[] = [];
      paragraphs.forEach((para, index) => {
        const images = Array.from(para.querySelectorAll('img'));
        if (images.length > 0) {
          imageParagraphs.push({ paragraph: para, index: index, imageCount: images.length });
        }
      });
      
      // Process each image paragraph
      imageParagraphs.forEach((paraInfo) => {
        const { paragraph, imageCount } = paraInfo;
        
        // Process paragraphs with 1 or more images
        if (imageCount >= 1) {
          
          // Create gallery container
          const galleryContainer = document.createElement('div');
          
          if (imageCount === 1) {
            galleryContainer.className = 'image-grid image-grid-1 my-2';
          } else if (imageCount === 2) {
            galleryContainer.className = 'image-grid image-grid-2 my-8';
          } else if (imageCount === 3) {
            galleryContainer.className = 'image-grid image-grid-3 my-8';
          } else if (imageCount >= 4) {
            galleryContainer.className = 'image-grid image-grid-4 my-8';
          }
          
          // Get all images from this paragraph
          const images = Array.from(paragraph.querySelectorAll('img'));
          
          // Check if there's any non-image content (like captions)
          // ONLY for single images - grids don't have captions
          let nonImageContent = [];
          if (imageCount === 1) {
            nonImageContent = Array.from(paragraph.childNodes).filter(node => {
              if (node.nodeType === Node.ELEMENT_NODE) {
                const element = node as Element;
                return element.tagName !== 'IMG' && element.tagName !== 'PICTURE';
              }
              if (node.nodeType === Node.TEXT_NODE) {
                return (node.textContent || '').trim() !== '';
              }
              return true;
            });
            
            // If no caption content found in the same paragraph, check the next paragraph
            // BUT only if it looks like a caption (has italic text or links, and is not a heading)
            if (nonImageContent.length === 0) {
              const nextParagraph = paragraph.nextElementSibling;
              if (nextParagraph && nextParagraph.tagName === 'P') {
                // Check if the next paragraph looks like a caption (contains italic text or links)
                const hasItalic = nextParagraph.querySelector('em, i');
                const hasLinks = nextParagraph.querySelector('a');
                const isHeading = nextParagraph.querySelector('h1, h2, h3, h4, h5, h6');
                const hasOnlyText = nextParagraph.textContent && nextParagraph.textContent.trim() !== '' && 
                                  nextParagraph.children.length <= 2; // Allow for simple formatting
                
                // Only treat as caption if it has italic/links AND is not a heading
                if ((hasItalic || hasLinks || hasOnlyText) && !isHeading) {
                  // This looks like a caption, include it
                  nonImageContent = Array.from(nextParagraph.childNodes);
                  // Mark the next paragraph for removal since we're moving its content
                  nextParagraph.style.display = 'none';
                }
              }
            }
          }
          
          // Add each image to gallery
          images.forEach((img, imgIndex) => {
            const imageItem = document.createElement('div');
            imageItem.className = 'image-item';
            
            const button = document.createElement('button');
            button.className = 'image-button w-full h-full group cursor-pointer';
            button.setAttribute('data-lightbox', 'gallery');
            button.setAttribute('aria-label', `View ${img.alt} in full size`);
            
                   // Add click event listener to open lightbox
                   button.addEventListener('click', () => {
                     // Dispatch custom event to open lightbox
                     window.dispatchEvent(new CustomEvent('openLightbox', {
                       detail: { index: imgIndex, button: button }
                     }));
                   });
            
            const imgClone = img.cloneNode(true) as HTMLImageElement;
            imgClone.className = 'w-full h-full object-cover rounded-lg transition-all duration-300 group-hover:shadow-lg group-hover:scale-[1.02]';
            imgClone.loading = 'lazy';
            imgClone.setAttribute('data-lightbox', 'gallery');
            
            const overlay = document.createElement('div');
            overlay.className = 'absolute inset-0 bg-black/0 group-hover:bg-black/10 transition-colors duration-300 rounded-lg flex items-center justify-center';
            
            const zoomIcon = document.createElement('div');
            zoomIcon.className = 'w-6 h-6 text-white opacity-0 group-hover:opacity-100 transition-opacity duration-300';
            zoomIcon.innerHTML = `
              <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7"></path>
              </svg>
            `;
            
            overlay.appendChild(zoomIcon);
            button.appendChild(imgClone);
            button.appendChild(overlay);
            imageItem.appendChild(button);
            galleryContainer.appendChild(imageItem);
          });
          
          // Create a container for the gallery and any non-image content
          const container = document.createElement('div');
          container.className = 'image-container';
          container.appendChild(galleryContainer);
          
          // Add any non-image content (like captions) after the gallery
          if (nonImageContent.length > 0) {
            const captionContainer = document.createElement('div');
            captionContainer.className = 'image-caption-container mt-2';
            nonImageContent.forEach(node => {
              captionContainer.appendChild(node.cloneNode(true));
            });
            container.appendChild(captionContainer);
          }
          
          // Replace the paragraph with the container
          paragraph.parentNode?.replaceChild(container, paragraph);
        }
      });
      
    }
    
    // Initialize on page load
    document.addEventListener('DOMContentLoaded', initializeImageGalleries);
    
    // Make function available globally for Swup
    window['initializeImageGalleries'] = initializeImageGalleries;
  </script>

  <!-- Category Filtering System -->
  <script>
    // Global category filtering function - Swup compatible
    function initializeCategoryFiltering() {
      const categoryItems = document.querySelectorAll('.category-item');
      const projectCards = document.querySelectorAll('[data-project-categories]');
      let currentActiveCategory = null;

      // Remove existing event listeners to prevent duplicates
      categoryItems.forEach(item => {
        const newItem = item.cloneNode(true);
        item.parentNode?.replaceChild(newItem, item);
      });

      // Re-query after cloning to get fresh elements
      const freshCategoryItems = document.querySelectorAll('.category-item');

      // Add click functionality for filtering
      freshCategoryItems.forEach(item => {
        item.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          
          const category = item.getAttribute('data-category');
          
          if (!category) {
            return;
          }
          
          // Check if this category is already active
          const isCurrentlyActive = currentActiveCategory === category;
          
          // Reset all buttons to inactive state
          freshCategoryItems.forEach(btn => {
            btn.classList.remove('bg-highlight-100', 'dark:bg-highlight-900/40', 'text-highlight-800', 'dark:text-highlight-200', 'ring-1', 'ring-highlight-300', 'dark:ring-highlight-700');
            btn.classList.add('bg-primary-100', 'dark:bg-primary-800', 'text-primary-700', 'dark:text-primary-300');
          });
          
          if (isCurrentlyActive) {
            // If clicking the same category, show all projects
            projectCards.forEach(card => {
              card.style.display = 'block';
            });
            currentActiveCategory = null;
          } else {
            // Filter projects by category
            projectCards.forEach(card => {
              const cardCategories = card.getAttribute('data-project-categories') || '';
              
              if (cardCategories.includes(category)) {
                card.style.display = 'block';
              } else {
                card.style.display = 'none';
              }
            });
            
            // Make clicked button active
            item.classList.remove('bg-primary-100', 'dark:bg-primary-800', 'text-primary-700', 'dark:text-primary-300');
            item.classList.add('bg-highlight-100', 'dark:bg-highlight-900/40', 'text-highlight-800', 'dark:text-highlight-200', 'ring-1', 'ring-highlight-300', 'dark:ring-highlight-700');
            currentActiveCategory = category;
          }

          // Dispatch custom event for analytics
          window.dispatchEvent(new CustomEvent('categoryClicked', {
            detail: { category, isActive: currentActiveCategory === category }
          }));
        });
      });
    }

    // Initialize immediately
    initializeCategoryFiltering();
    
    // Initialize on DOM ready
    document.addEventListener('DOMContentLoaded', initializeCategoryFiltering);
    
    // Make function available globally for Swup
    window['initializeCategoryFiltering'] = initializeCategoryFiltering;
  </script>

  <!-- Lightbox for images (global) -->
  <Lightbox />

  <!-- Additional body scripts -->
  <slot name="scripts" />
</body>
</html>