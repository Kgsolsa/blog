
---
import type { Page } from '@/types';
import { siteConfig } from '@/config';
import { generatePageSEO } from '@/utils/seo';
import { optimizePageImagePath } from '@/utils/images';
import BaseLayout from '@/layouts/BaseLayout.astro';
import TableOfContents from '@/components/TableOfContents.astro';
import Lightbox from '@/components/Lightbox.astro';
import { Image } from 'astro:assets';

export interface Props {
  page: Page;
}

const { page } = Astro.props;

// Dynamic image import for local images
let localImage: any = null;
if (page.data.image && !page.data.image.startsWith('http')) {
  try {
    const imagePath = optimizePageImagePath(page.data.image);
    const images = import.meta.glob('/public/pages/images/*');
    const imageKey = `/public${imagePath}`;
    
    if (images[imageKey]) {
      localImage = await images[imageKey]();
    }
  } catch (error) {
    console.warn('Failed to import page image:', page.data.image, error);
  }
}

// Render the page content
const { Content, headings } = await page.render();

// Generate SEO data
const seoData = generatePageSEO(page, Astro.url.href);

// Generate table of contents from headings
const toc = headings.filter(h => h.depth >= 2 && h.depth <= 4);

// Check if TOC should be shown - use frontmatter preference or global setting
const showTOC = page.data.showTOC !== undefined ? page.data.showTOC : siteConfig.features.tableOfContents;
const shouldShowTOC = showTOC && toc.length > 0;

// Generate structured data
const structuredData = {
  '@context': 'https://schema.org',
  '@type': 'WebPage',
  name: page.data.title,
  description: page.data.description,
  url: Astro.url.href,
  isPartOf: {
    '@type': 'WebSite',
    name: siteConfig.title,
    url: siteConfig.site
  },
  author: {
    '@type': 'Person',
    name: siteConfig.author
  }
};
---

<BaseLayout seoData={seoData}>
  <Fragment slot="head">
    <!-- Structured Data -->
    <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
    
    <!-- Preload page image if exists -->
    {page.data.image && !page.data.image.startsWith('http') && (
      <link 
        rel="preload" 
        as="image" 
        href={optimizePageImagePath(page.data.image)}
        fetchpriority="high"
      />
    )}
  </Fragment>

  <div class="py-2 relative">
    <!-- TOC is hidden on mobile and tablet, only shown on desktop -->

    <div class="mx-auto px-4 sm:px-6 lg:px-8 relative" style={`max-width: ${siteConfig.layout.contentWidth}`}>
      <!-- Main content -->
      <article class="max-w-none">
        <!-- Page header -->
        <header>


          {page.data.image && (
            <div class="aspect-video overflow-hidden rounded-xl mt-8">
              {page.data.image.startsWith('http') ? (
                <img
                  src={page.data.image}
                  alt={page.data.imageAlt || page.data.title}
                  class="w-full h-full object-cover"
                  width="800"
                  height="450"
                  loading="eager"
                  decoding="async"
                  fetchpriority="high"
                />
              ) : localImage ? (
                <Image
                  src={localImage.default}
                  alt={page.data.imageAlt || page.data.title}
                  width={800}
                  height={450}
                  format="webp"
                  class="w-full h-full object-cover"
                  loading="eager"
                  decoding="async"
                  fetchpriority="high"
                />
              ) : (
                <img
                  src={optimizePageImagePath(page.data.image)}
                  alt={page.data.imageAlt || page.data.title}
                  class="w-full h-full object-cover"
                  width="800"
                  height="450"
                  loading="eager"
                  decoding="async"
                  fetchpriority="high"
                />
              )}
            </div>
          )}
        </header>

        <!-- Page content -->
        <div class="prose prose-sm dark:prose-dark max-w-none">
          <Content />
        </div>
      </article>

      <!-- Desktop TOC - floats to the right of the content container -->
      {shouldShowTOC && (
        <div class="hidden xl:block absolute top-0 left-full ml-8 w-64">
          <div class="sticky top-24">
            <TableOfContents headings={toc} />
          </div>
        </div>
      )}
    </div>
  </div>

  <!-- Lightbox for images -->
  <Lightbox />

  <Fragment slot="scripts">
    <script>
      // Process content after DOM loads
      document.addEventListener('DOMContentLoaded', function() {
        // Initialize image grid layouts
        function initializeImageGrids() {
          // Find all paragraphs that contain only images (including Image component output)
          const paragraphs = document.querySelectorAll('.prose p');
          
          paragraphs.forEach(p => {
            const images = p.querySelectorAll('img, picture');
            const textNodes = Array.from(p.childNodes).filter(node => 
              node.nodeType === Node.TEXT_NODE && node.textContent.trim() !== ''
            );
            const otherElements = Array.from(p.childNodes).filter(node => 
              node.nodeType === Node.ELEMENT_NODE && !['IMG', 'PICTURE', 'BR'].includes(node.tagName)
            );
            
            // Only process if paragraph contains 2+ images and no other meaningful content
            if (images.length >= 2 && textNodes.length === 0 && otherElements.length === 0) {
              // Remove any existing image-grid classes first
              p.classList.remove('image-grid', 'image-grid-2', 'image-grid-3', 'image-grid-4', 'image-grid-5', 'image-grid-6');
              
              // Add the appropriate grid class
              const gridClass = `image-grid-${Math.min(images.length, 6)}`;
              p.classList.add('image-grid', gridClass);
            }
          });
        }
        
        // Initialize image grids
        initializeImageGrids();
        
        // Wrap tables in responsive containers for better mobile experience
        const tables = document.querySelectorAll('.prose table');
        tables.forEach(table => {
          if (!table.parentElement.classList.contains('table-wrapper')) {
            const wrapper = document.createElement('div');
            wrapper.className = 'table-wrapper';
            wrapper.style.cssText = 'overflow-x: auto; -webkit-overflow-scrolling: touch; margin: 1.5rem 0; border-radius: 0.5rem; box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);';
            
            table.parentNode.insertBefore(wrapper, table);
            wrapper.appendChild(table);
            
            // Reset table margin since wrapper handles it
            table.style.margin = '0';
          }
        });

        
      });
    </script>
  </Fragment>
</BaseLayout>

