
---
import type { Page } from '@/types';
import { siteConfig } from '@/config';
import { generatePageSEO } from '@/utils/seo';
import BaseLayout from '@/layouts/BaseLayout.astro';
import TableOfContents from '@/components/TableOfContents.astro';
import Lightbox from '@/components/Lightbox.astro';
import ImageWrapper from '@/components/ImageWrapper.astro';

export interface Props {
  page: Page;
}

const { page } = Astro.props;

// No need for dynamic image import - ImageWrapper handles this

// Render the page content
const { Content, headings } = await page.render();

// Generate SEO data
const seoData = generatePageSEO(page, Astro.url.href);

// Generate table of contents from headings
const toc = headings.filter(h => h.depth >= 2 && h.depth <= 4);

// Check if TOC should be shown - use frontmatter preference or global setting
const showTOC = page.data.showTOC !== undefined ? page.data.showTOC : siteConfig.features.tableOfContents;
const shouldShowTOC = showTOC && toc.length > 0;

// Generate structured data
const structuredData = {
  '@context': 'https://schema.org',
  '@type': 'WebPage',
  name: page.data.title,
  description: page.data.description,
  url: Astro.url.href,
  isPartOf: {
    '@type': 'WebSite',
    name: siteConfig.title,
    url: siteConfig.site
  },
  author: {
    '@type': 'Person',
    name: siteConfig.author
  }
};
---

<BaseLayout seoData={seoData}>
  <Fragment slot="head">
    <!-- Structured Data -->
    <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
    
    <!-- Preload page image if exists -->
    {page.data.image && !page.data.image.startsWith('http') && (
      <link 
        rel="preload" 
        as="image" 
        href={`/pages/images/${page.data.image}`}
        fetchpriority="high"
      />
    )}
  </Fragment>

  <div class="relative">
    <!-- TOC is hidden on mobile and tablet, only shown on desktop -->

    <div class="mx-auto px-4 sm:px-6 lg:px-8 relative" style={`max-width: ${siteConfig.layout.contentWidth}`}>
      {page.data.image && (
        <div class="aspect-video overflow-hidden rounded-xl mb-8">
          <ImageWrapper
            src={page.data.image}
            basePath="/pages/images/"
            alt={page.data.imageAlt || `Featured image for page: ${page.data.title}`}
            class="w-full h-full"
            width={800}
            height={450}
            format="webp"
            quality={85}
            loading="eager"
            fetchpriority="high"
          />
        </div>
      )}

      <!-- Page content -->
      <div class="prose dark:prose-dark max-w-none">
        <Content />
      </div>

      <!-- Desktop TOC - floats to the right of the content container -->
      {shouldShowTOC && (
        <div class="hidden xl:block absolute top-0 left-full ml-8 w-64">
          <div class="sticky top-24" id="toc">
            <TableOfContents headings={toc} />
          </div>
        </div>
      )}
    </div>
  </div>

  <!-- Lightbox for images -->
  <Lightbox />

  <Fragment slot="scripts">
    <script>
      // Initialize lightbox functionality for images
      document.addEventListener('DOMContentLoaded', () => {
        function initializeLightbox() {
          const images = document.querySelectorAll('img');
          images.forEach((img, index) => {
            // Skip images that are already clickable (like in galleries)
            if (img.closest('a') || img.closest('.image-grid')) {
              return;
            }

            // Make image clickable
            img.style.cursor = 'pointer';
            img.addEventListener('click', () => {
              // Dispatch custom event to open lightbox
              window.dispatchEvent(new CustomEvent('openLightbox', {
                detail: { index }
              }));
            });
          });
        }

        // Initialize lightbox after a short delay to ensure images are loaded
        setTimeout(initializeLightbox, 200);
      });
      // Process content after DOM loads
      document.addEventListener('DOMContentLoaded', function() {
        // Initialize image grid layouts
        function initializeImageGrids() {
          // Find all paragraphs that contain only images (including Image component output)
          const paragraphs = document.querySelectorAll('.prose p');
          
          paragraphs.forEach(p => {
            const images = p.querySelectorAll('img, picture');
            const textNodes = Array.from(p.childNodes).filter((node) => {
              return node.nodeType === Node.TEXT_NODE && (node.textContent || '').trim() !== '';
            });
            const otherElements = Array.from(p.childNodes).filter((node) => {
              return node.nodeType === Node.ELEMENT_NODE && !['IMG', 'PICTURE', 'BR'].includes(((node as Element).tagName || ''));
            });
            
            // Only process if paragraph contains 2+ images and no other meaningful content
            if (images.length >= 2 && textNodes.length === 0 && otherElements.length === 0) {
              // Remove any existing image-grid classes first
              p.classList.remove('image-grid', 'image-grid-2', 'image-grid-3', 'image-grid-4', 'image-grid-5', 'image-grid-6');
              
              // Add the appropriate grid class
              const gridClass = `image-grid-${Math.min(images.length, 6)}`;
              p.classList.add('image-grid', gridClass);
            }
          });
        }
        
        // Initialize image grids
        initializeImageGrids();
        
        // Wrap tables in responsive containers for better mobile experience
        const tables = document.querySelectorAll('.prose table');
        tables.forEach((table) => {
          if (table.parentElement && !table.parentElement.classList.contains('table-wrapper')) {
            const wrapper = document.createElement('div');
            wrapper.className = 'table-wrapper';
            wrapper.style.cssText = 'overflow-x: auto; -webkit-overflow-scrolling: touch; margin: 1.5rem 0; border-radius: 0.5rem; box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);';
            
            if (table.parentNode) {
              (table.parentNode as Node & ParentNode).insertBefore(wrapper, table);
            }
            wrapper.appendChild(table);
            
            // Reset table margin since wrapper handles it
            (table as unknown as HTMLElement).style.margin = '0';
          }
        });

        
      });
    </script>
  </Fragment>
</BaseLayout>

