/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var y=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var $=Object.getOwnPropertyNames;var I=Object.prototype.hasOwnProperty;var P=(o,n)=>{for(var e in n)y(o,e,{get:n[e],enumerable:!0})},N=(o,n,e,t)=>{if(n&&typeof n=="object"||typeof n=="function")for(let s of $(n))!I.call(o,s)&&s!==e&&y(o,s,{get:()=>n[s],enumerable:!(t=C(n,s))||t.enumerable});return o};var E=o=>N(y({},"__esModule",{value:!0}),o);var R={};P(R,{default:()=>x});module.exports=E(R);var v=require("obsidian");var A={ignoreRegexes:["^_","^Untitled$","^Untitled \\d+$"],timeoutSeconds:5,caseSensitive:!1,autoCreateFrontmatter:!0,includeFolders:[],excludeFolders:[],fileExtensions:["md"],trackFolderRenames:!1};var u=require("obsidian"),f=class extends u.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){let{containerEl:e}=this;e.empty(),new u.Setting(e).setName("Ignore regex patterns").setDesc("Comma-separated regex patterns for filenames or immediate parent folder names to ignore (e.g., ^_ for underscore prefixes, ^Untitled$ for Untitled). Leave empty to disable.").addText(t=>t.setPlaceholder("^_,^Untitled$,^Untitled \\d+$").setValue(this.plugin.settings.ignoreRegexes.join(",")).onChange(async s=>{this.plugin.settings.ignoreRegexes=s.split(",").map(i=>i.trim()).filter(i=>i),await this.plugin.saveSettings()})),new u.Setting(e).setName("Timeout seconds").setDesc("Time in seconds the name must be stable before adding aliases.").addSlider(t=>t.setLimits(1,20,1).setValue(this.plugin.settings.timeoutSeconds).setDynamicTooltip().onChange(async s=>{this.plugin.settings.timeoutSeconds=s,await this.plugin.saveSettings()})),new u.Setting(e).setName("Case sensitive uniqueness").setDesc('If enabled, treat "Note" and "note" as different aliases.').addToggle(t=>t.setValue(this.plugin.settings.caseSensitive).onChange(async s=>{this.plugin.settings.caseSensitive=s,await this.plugin.saveSettings()})),new u.Setting(e).setName("Auto-create properties").setDesc("Automatically create properties with aliases if missing.").addToggle(t=>t.setValue(this.plugin.settings.autoCreateFrontmatter).onChange(async s=>{this.plugin.settings.autoCreateFrontmatter=s,await this.plugin.saveSettings()})),new u.Setting(e).setName("Track folder renames").setDesc("If enabled, store old immediate parent folder names as aliases when parent folders are renamed.").addToggle(t=>t.setValue(this.plugin.settings.trackFolderRenames).onChange(async s=>{this.plugin.settings.trackFolderRenames=s,await this.plugin.saveSettings()})),new u.Setting(e).setName("File extensions").setDesc("Comma-separated list of file extensions to track, e.g., md,mdx").addText(t=>t.setValue(this.plugin.settings.fileExtensions.join(",")).onChange(async s=>{this.plugin.settings.fileExtensions=s.split(",").map(i=>i.trim()).filter(i=>i),await this.plugin.saveSettings()})),new u.Setting(e).setName("Include folders").setDesc("Comma-separated list of folder paths to include (empty for all).").addText(t=>t.setValue(this.plugin.settings.includeFolders.join(",")).onChange(async s=>{this.plugin.settings.includeFolders=s.split(",").map(i=>i.trim()).filter(i=>i),await this.plugin.saveSettings()})),new u.Setting(e).setName("Exclude folders").setDesc("Comma-separated list of folder paths to exclude.").addText(t=>t.setValue(this.plugin.settings.excludeFolders.join(",")).onChange(async s=>{this.plugin.settings.excludeFolders=s.split(",").map(i=>i.trim()).filter(i=>i),await this.plugin.saveSettings()}))}};var S=class{constructor(n,e){this.app=n;this.settings=e}async processAliases(n,e){let t=this.app.vault.getFileByPath(n);if(!t)return;let s=[];for(let a of this.settings.ignoreRegexes)try{s.push(new RegExp(a))}catch(g){console.error(`Invalid ignore regex: ${a}`,g)}let i=[],d=t.basename,h=d.toLowerCase();for(let a of e){if(s.some(r=>r.test(a))){console.log(`Skipping alias "${a}" for file "${n}" due to matching ignore regex`);continue}let g=a.toLowerCase();if(this.settings.caseSensitive&&a===d||!this.settings.caseSensitive&&g===h){console.log(`Skipping alias "${a}" for file "${n}": matches current basename`);continue}i.push(a)}i.length!==0&&await this.app.fileManager.processFrontMatter(t,a=>{let g=a.aliases;if(!Array.isArray(g)){if(!this.settings.autoCreateFrontmatter)return;g=[],a.aliases=g}let r=new Set(this.settings.caseSensitive?g:g.map(m=>m.toLowerCase()));for(let m of i){let p=this.settings.caseSensitive?m:m.toLowerCase();r.has(p)||(g.push(m),r.add(p),console.log(`Added alias "${m}" for file "${n}"`))}})}};function T(o){return(o.split("/").pop()||"").replace(/\.[^/.]+$/,"")}function F(o){let n=o.split("/");return n.pop(),n.pop()||""}var x=class extends v.Plugin{constructor(){super(...arguments);this.debounceMap=new Map}async onload(){await this.loadSettings(),this.aliasProcessor=new S(this.app,this.settings),this.addSettingTab(new f(this.app,this)),this.registerEvent(this.app.vault.on("rename",this.handleRename.bind(this)))}onunload(){for(let e of this.debounceMap.values())e.timeoutId!==null&&clearTimeout(e.timeoutId);this.debounceMap.clear()}async loadSettings(){this.settings=Object.assign({},A,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async handleRename(e,t){if(!(e instanceof v.TFile)||!this.settings.fileExtensions.includes(e.extension))return;let s=T(t),i=e.basename,d=F(t),h=F(e.path),a=this.settings.caseSensitive?s!==i:s.toLowerCase()!==i.toLowerCase(),g=d!==h&&!a;if(!a&&!g){console.log(`Skipping rename for "${t}" to "${e.path}": no significant change`);return}let r=e.path;if(this.settings.includeFolders.length>0&&!this.settings.includeFolders.some(l=>r.startsWith(l+"/")||r===l)){console.log(`Skipping rename for "${r}": not in included folders`);return}if(this.settings.excludeFolders.some(l=>r.startsWith(l+"/")||r===l)){console.log(`Skipping rename for "${r}": in excluded folders`);return}let m=[];for(let l of this.settings.ignoreRegexes)try{m.push(new RegExp(l))}catch(b){console.error(`Invalid ignore regex: ${l}`,b)}let p=null;if(a){if(m.some(l=>l.test(s)||l.test(i))){console.log(`Skipping filename rename from "${s}" to "${i}" for file "${r}" due to matching ignore regex`);return}p=s}else if(g&&this.settings.trackFolderRenames){if(d===""||h===""){console.log(`Skipping folder rename for "${r}": root-level file`);return}if(m.some(l=>l.test(d)||l.test(h))){console.log(`Skipping folder rename from "${d}" to "${h}" for file "${r}" due to matching ignore regex`);return}p=d}if(!p)return;let c,w=this.debounceMap.get(t);w?(c=w,this.debounceMap.delete(t),c.currentPath=e.path):c={queue:new Set,timeoutId:null,currentPath:e.path},c.queue.add(p),c.timeoutId!==null&&clearTimeout(c.timeoutId),c.timeoutId=setTimeout(()=>{this.aliasProcessor.processAliases(c.currentPath,c.queue),this.debounceMap.delete(c.currentPath)},this.settings.timeoutSeconds*1e3),this.debounceMap.set(e.path,c)}};
