/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var S=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var b=Object.prototype.hasOwnProperty;var C=(d,g)=>{for(var e in g)S(d,e,{get:g[e],enumerable:!0})},$=(d,g,e,t)=>{if(g&&typeof g=="object"||typeof g=="function")for(let s of y(g))!b.call(d,s)&&s!==e&&S(d,s,{get:()=>g[s],enumerable:!(t=w(g,s))||t.enumerable});return d};var F=d=>$(S({},"__esModule",{value:!0}),d);var I={};C(I,{default:()=>f});module.exports=F(I);var o=require("obsidian"),T={ignoreRegexes:["^_","^Untitled$","^Untitled \\d+$"],timeoutSeconds:5,caseSensitive:!1,autoCreateFrontmatter:!0,includeFolders:[],excludeFolders:[],fileExtensions:["md"],trackFolderRenames:!1},f=class extends o.Plugin{constructor(){super(...arguments);this.debounceMap=new Map}async onload(){await this.loadSettings(),this.addSettingTab(new x(this.app,this)),this.registerEvent(this.app.vault.on("rename",this.handleRename.bind(this)))}onunload(){for(let e of this.debounceMap.values())e.timeoutId!==null&&clearTimeout(e.timeoutId);this.debounceMap.clear()}async loadSettings(){this.settings=Object.assign({},T,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}getBasename(e){return(e.split("/").pop()||"").replace(/\.[^/.]+$/,"")}getImmediateParentName(e){let t=e.split("/");return t.pop(),t.pop()||""}async handleRename(e,t){if(!(e instanceof o.TFile)||!this.settings.fileExtensions.includes(e.extension))return;let s=this.getBasename(t),i=e.basename,u=this.getImmediateParentName(t),p=this.getImmediateParentName(e.path),h=this.settings.caseSensitive?s!==i:s.toLowerCase()!==i.toLowerCase(),a=u!==p&&!h;if(!h&&!a){console.log(`Skipping rename for "${t}" to "${e.path}": no significant change`);return}let n=e.path;if(this.settings.includeFolders.length>0&&!this.settings.includeFolders.some(l=>n.startsWith(l+"/")||n===l)){console.log(`Skipping rename for "${n}": not in included folders`);return}if(this.settings.excludeFolders.some(l=>n.startsWith(l+"/")||n===l)){console.log(`Skipping rename for "${n}": in excluded folders`);return}let m=[];for(let l of this.settings.ignoreRegexes)try{m.push(new RegExp(l))}catch(v){console.error(`Invalid ignore regex: ${l}`,v)}let c=null;if(h){if(m.some(l=>l.test(s)||l.test(i))){console.log(`Skipping filename rename from "${s}" to "${i}" for file "${n}" due to matching ignore regex`);return}c=s}else if(a&&this.settings.trackFolderRenames){if(u===""||p===""){console.log(`Skipping folder rename for "${n}": root-level file`);return}if(m.some(l=>l.test(u)||l.test(p))){console.log(`Skipping folder rename from "${u}" to "${p}" for file "${n}" due to matching ignore regex`);return}c=u}if(!c)return;let r;this.debounceMap.has(t)?(r=this.debounceMap.get(t),this.debounceMap.delete(t),r.currentPath=e.path):r={queue:new Set,timeoutId:null,currentPath:e.path},r.queue.add(c),r.timeoutId!==null&&clearTimeout(r.timeoutId),r.timeoutId=setTimeout(()=>{this.processAliases(r.currentPath,r.queue),this.debounceMap.delete(r.currentPath)},this.settings.timeoutSeconds*1e3),this.debounceMap.set(e.path,r)}async processAliases(e,t){let s=this.app.vault.getFileByPath(e);if(!s)return;let i=[];for(let a of this.settings.ignoreRegexes)try{i.push(new RegExp(a))}catch(n){console.error(`Invalid ignore regex: ${a}`,n)}let u=[],p=s.basename,h=p.toLowerCase();for(let a of t){if(i.some(m=>m.test(a))){console.log(`Skipping alias "${a}" for file "${e}" due to matching ignore regex`);continue}let n=a.toLowerCase();if(this.settings.caseSensitive&&a===p||!this.settings.caseSensitive&&n===h){console.log(`Skipping alias "${a}" for file "${e}": matches current basename`);continue}u.push(a)}u.length!==0&&await this.app.fileManager.processFrontMatter(s,a=>{let n=a.aliases;if(!Array.isArray(n)){if(!this.settings.autoCreateFrontmatter)return;n=[],a.aliases=n}let m=new Set(this.settings.caseSensitive?n:n.map(c=>c.toLowerCase()));for(let c of u){let r=this.settings.caseSensitive?c:c.toLowerCase();m.has(r)||(n.push(c),m.add(r),console.log(`Added alias "${c}" for file "${e}"`))}})}},x=class extends o.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){let{containerEl:e}=this;e.empty(),new o.Setting(e).setName("Ignore regex patterns").setDesc("Comma-separated regex patterns for filenames or immediate parent folder names to ignore (e.g., ^_ for underscore prefixes, ^Untitled$ for Untitled). Leave empty to disable.").addText(t=>t.setPlaceholder("^_,^Untitled$,^Untitled \\d+$").setValue(this.plugin.settings.ignoreRegexes.join(",")).onChange(async s=>{this.plugin.settings.ignoreRegexes=s.split(",").map(i=>i.trim()).filter(i=>i),await this.plugin.saveSettings()})),new o.Setting(e).setName("Timeout seconds").setDesc("Time in seconds the name must be stable before adding aliases.").addSlider(t=>t.setLimits(1,20,1).setValue(this.plugin.settings.timeoutSeconds).setDynamicTooltip().onChange(async s=>{this.plugin.settings.timeoutSeconds=s,await this.plugin.saveSettings()})),new o.Setting(e).setName("Case sensitive uniqueness").setDesc('If enabled, treat "Note" and "note" as different aliases.').addToggle(t=>t.setValue(this.plugin.settings.caseSensitive).onChange(async s=>{this.plugin.settings.caseSensitive=s,await this.plugin.saveSettings()})),new o.Setting(e).setName("Auto-create properties").setDesc("Automatically create properties with aliases if missing.").addToggle(t=>t.setValue(this.plugin.settings.autoCreateFrontmatter).onChange(async s=>{this.plugin.settings.autoCreateFrontmatter=s,await this.plugin.saveSettings()})),new o.Setting(e).setName("Track folder renames").setDesc("If enabled, store old immediate parent folder names as aliases when parent folders are renamed.").addToggle(t=>t.setValue(this.plugin.settings.trackFolderRenames).onChange(async s=>{this.plugin.settings.trackFolderRenames=s,await this.plugin.saveSettings()})),new o.Setting(e).setName("File extensions").setDesc("Comma-separated list of file extensions to track, e.g., md,mdx").addText(t=>t.setValue(this.plugin.settings.fileExtensions.join(",")).onChange(async s=>{this.plugin.settings.fileExtensions=s.split(",").map(i=>i.trim()).filter(i=>i),await this.plugin.saveSettings()})),new o.Setting(e).setName("Include folders").setDesc("Comma-separated list of folder paths to include (empty for all).").addText(t=>t.setValue(this.plugin.settings.includeFolders.join(",")).onChange(async s=>{this.plugin.settings.includeFolders=s.split(",").map(i=>i.trim()).filter(i=>i),await this.plugin.saveSettings()})),new o.Setting(e).setName("Exclude folders").setDesc("Comma-separated list of folder paths to exclude.").addText(t=>t.setValue(this.plugin.settings.excludeFolders.join(",")).onChange(async s=>{this.plugin.settings.excludeFolders=s.split(",").map(i=>i.trim()).filter(i=>i),await this.plugin.saveSettings()}))}};
